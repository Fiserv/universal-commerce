openapi: 3.0.1
info:
  title: uCom Payment Services
  description: Use these services to initiate AUTH/CAPTURE/SALE transactions using
    a payment account. This message supports transactions for enrolled and non-enrolled
    funding accounts including accounts enrolled with external payment systems like
    Apple Pay, Android Pay, Samsung Pay, and Visa Checkout.
  version: 0.2.2
servers:
- url: https://int.api.firstdata.com/ucom
tags:
- name: authorization
- name: capture
- name: refund
- name: sale
paths:
  /v1/payments/auths:
    get:
      x-group-name: Payment Services
      x-proxy-name: Get payment authorization
      x-default-example: PARTIAL
      tags:
      - authorization
      summary: Get a specific payment authorization
      description: Fetch details of a payment authorization
      parameters:
      - name: Api-Key
        in: header
        description: An API key is a string value passed by a client app to the API
          proxies. The key uniquely identifies the client app.
        required: true
        schema:
          type: string
      - name: Timestamp
        in: header
        description: Epoch timestamp in the request initiating system
        required: true
        schema:
          type: string
      - name: Authorization
        in: header
        description: Authorization information for the request. Format- `HMAC {hmacToken}`
        required: true
        schema:
          type: string
      - name: Client-Token
        in: header
        description: Used to pass the original client OAuth token information given
          in a client-credentials flow.  This field is only used when the server is
          making the request and needs to link the transaction to a specific client.  Format-
          `Bearer {access_token}`
        schema:
          type: string
      - name: Retailer-Partner-Id
        in: header
        description: Retailer partner identification for marketplace
        schema:
          type: string
      - name: Accept-Language
        in: header
        description: The Accept-Language header contains information about the language
          preference of a user. This HTTP header is useful to multilingual sites for
          deciding the best language to serve to the client. i.e en-US,fr-CA
        schema:
          type: string
      - name: clientRequestId
        in: query
        description: Contains a unique ID generated by the client that can be used
          for enforcing idempotency on POST actions.
        schema:
          type: string
      - name: Sub-Merchant-Id
        in: header
        description: Sub Merchant Id contains information about the merchant identifier
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Authorization'
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: Unauthorized
          content: {}
        404:
          description: Not Found - The requested resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: An unexpected server error occured.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      x-group-name: Payment Services
      x-proxy-name: Create payment authorization
      tags:
      - authorization
      summary: Create a payment authorization
      description: Must include a funding source, authorization type and requested
        amount greater than 0.
      parameters:
      - name: Api-Key
        in: header
        description: An API key is a string value passed by a client app to the API
          proxies. The key uniquely identifies the client app.
        required: true
        schema:
          type: string
      - name: Timestamp
        in: header
        description: Epoch timestamp in the request initiating system
        required: true
        schema:
          type: string
      - name: Authorization
        in: header
        description: Authorization information for the request. Format- `HMAC {hmacToken}`
        required: true
        schema:
          type: string
      - name: Client-Token
        in: header
        description: Used to pass the original client OAuth token information given
          in a client-credentials flow.  This field is only used when the server is
          making the request and needs to link the transaction to a specific client.  Format-
          `Bearer {access_token}`
        schema:
          type: string
      - name: Client-Request-Id
        in: header
        description: Contains a unique ID generated by the client that can be used
          for enforcing idempotency on POST actions. POSTs are inherently non-idempotent
          and submitting the exact same request multiple times would create duplicate
          resources. Note:- Omitting this header increases the risk of duplicate transactions,
          which for payments could cost the client issues like double-billing.
        required: true
        schema:
          type: string
      - name: Retailer-Partner-Id
        in: header
        description: Retailer partner identification for marketplace
        schema:
          type: string
      - name: Accept-Language
        in: header
        description: The Accept-Language header contains information about the language
          preference of a user. This HTTP header is useful to multilingual sites for
          deciding the best language to serve to the client. i.e en-US,fr-CA
        schema:
          type: string
      - name: Sub-Merchant-Id
        in: header
        description: Sub Merchant Id contains information about the merchant identifier
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthRequest'
        required: true
      responses:
        201:
          description: Resource created
          headers:
            Location:
              description: Location of newly created resource.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Authorization'
        202:
          description: Partially created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Authorization'
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: Unauthorized
          content: {}
        409:
          description: Conflict - The requested operation conflicts with the current
            state of the identified resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: An unexpected server error occured.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-codegen-request-body-name: payload
  /v1/payments/auths/{fdAuthorizationId}:
    get:
      x-group-name: Payment Services
      x-proxy-name: Get payment authorization details
      tags:
      - authorization
      summary: Get a specific payment authorization
      description: Fetch details of a payment authorization
      parameters:
      - name: Api-Key
        in: header
        description: An API key is a string value passed by a client app to the API
          proxies. The key uniquely identifies the client app.
        required: true
        schema:
          type: string
      - name: Timestamp
        in: header
        description: Epoch timestamp in the request initiating system
        required: true
        schema:
          type: string
      - name: Authorization
        in: header
        description: Authorization information for the request. Format- `HMAC {hmacToken}`
        required: true
        schema:
          type: string
      - name: Client-Token
        in: header
        description: Used to pass the original client OAuth token information given
          in a client-credentials flow.  This field is only used when the server is
          making the request and needs to link the transaction to a specific client.  Format-
          `Bearer {access_token}`
        schema:
          type: string
      - name: fdAuthorizationId
        in: path
        description: Unique identifier provided for the payment authorization
        required: true
        schema:
          type: string
      - name: Retailer-Partner-Id
        in: header
        description: Retailer partner identification for marketplace
        schema:
          type: string
      - name: Accept-Language
        in: header
        description: The Accept-Language header contains information about the language
          preference of a user. This HTTP header is useful to multilingual sites for
          deciding the best language to serve to the client. i.e en-US,fr-CA
        schema:
          type: string
      - name: Sub-Merchant-Id
        in: header
        description: Sub Merchant Id contains information about the merchant identifier
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Authorization'
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: Unauthorized
          content: {}
        404:
          description: Not Found - The requested resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: An unexpected server error occured.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      x-group-name: Payment Services
      x-proxy-name: Patch payment authorization
      tags:
      - authorization
      summary: Patch a specific payment authorization
      description: Proceed the transaction with action type
      parameters:
      - name: Api-Key
        in: header
        description: An API key is a string value passed by a client app to the API
          proxies. The key uniquely identifies the client app.
        required: true
        schema:
          type: string
      - name: Timestamp
        in: header
        description: Epoch timestamp in the request initiating system
        required: true
        schema:
          type: string
      - name: Authorization
        in: header
        description: Authorization information for the request. Format- `HMAC {hmacToken}`
        required: true
        schema:
          type: string
      - name: Client-Token
        in: header
        description: Used to pass the original client OAuth token information given
          in a client-credentials flow.  This field is only used when the server is
          making the request and needs to link the transaction to a specific client.  Format-
          `Bearer {access_token}`
        schema:
          type: string
      - name: fdAuthorizationId
        in: path
        description: Unique identifier provided for the payment authorization
        required: true
        schema:
          type: string
      - name: Retailer-Partner-Id
        in: header
        description: Retailer partner identification for marketplace
        schema:
          type: string
      - name: Accept-Language
        in: header
        description: The Accept-Language header contains information about the language
          preference of a user. This HTTP header is useful to multilingual sites for
          deciding the best language to serve to the client. i.e en-US,fr-CA
        schema:
          type: string
      - name: Sub-Merchant-Id
        in: header
        description: Sub Merchant Id contains information about the merchant identifier
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                action:
                  $ref: '#/components/schemas/UpdateActionType'
                threeDSecureInfo:
                  $ref: '#/components/schemas/ThreeDSecure'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Authorization'
        204:
          description: The request succeeded but there's really nothing to show.
          content: {}
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: Unauthorized
          content: {}
        404:
          description: Not Found - The requested resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: An unexpected server error occured.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-codegen-request-body-name: payload
  /v1/payments/auths/{fdAuthorizationId}/void:
    post:
      x-group-name: Payment Services
      x-proxy-name: Void payment authorization
      tags:
      - authorization
      summary: Execute an action on a payment authorization.
      description: Used to void the payment authorization.
      parameters:
      - name: Api-Key
        in: header
        description: An API key is a string value passed by a client app to the API
          proxies. The key uniquely identifies the client app.
        required: true
        schema:
          type: string
      - name: Timestamp
        in: header
        description: Epoch timestamp in the request initiating system
        required: true
        schema:
          type: string
      - name: Authorization
        in: header
        description: Authorization information for the request. Format- `HMAC {hmacToken}`
        required: true
        schema:
          type: string
      - name: Client-Token
        in: header
        description: Used to pass the original client OAuth token information given
          in a client-credentials flow.  This field is only used when the server is
          making the request and needs to link the transaction to a specific client.  Format-
          `Bearer {access_token}`
        schema:
          type: string
      - name: Client-Request-Id
        in: header
        description: Contains a unique ID generated by the client that can be used
          for enforcing idempotency on POST actions. POSTs are inherently non-idempotent
          and submitting the exact same request multiple times would create duplicate
          resources. Note:- Omitting this header increases the risk of duplicate transactions,
          which for payments could cost the client issues like double-billing.
        required: true
        schema:
          type: string
      - name: fdAuthorizationId
        in: path
        description: Unique identifier provided for the payment authorization
        required: true
        schema:
          type: string
      - name: Retailer-Partner-Id
        in: header
        description: Retailer partner identification for marketplace
        schema:
          type: string
      - name: Accept-Language
        in: header
        description: The Accept-Language header contains information about the language
          preference of a user. This HTTP header is useful to multilingual sites for
          deciding the best language to serve to the client. i.e en-US,fr-CA
        schema:
          type: string
      - name: Sub-Merchant-Id
        in: header
        description: Sub Merchant Id contains information about the merchant identifier
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VoidRequest'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Authorization'
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: Unauthorized
          content: {}
        404:
          description: Not Found - The requested resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: An unexpected server error occured.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-codegen-request-body-name: payload
  /v1/payments/auths/{fdAuthorizationId}/captures:
    post:
      x-group-name: Payment Services
      x-proxy-name: Capture payment authorization
      tags:
      - authorization
      summary: Execute capture on a payment authorization.
      description: Capture aka fulfill a previous authorization.
      parameters:
      - name: Api-Key
        in: header
        description: An API key is a string value passed by a client app to the API
          proxies. The key uniquely identifies the client app.
        required: true
        schema:
          type: string
      - name: Timestamp
        in: header
        description: Epoch timestamp in the request initiating system
        required: true
        schema:
          type: string
      - name: Authorization
        in: header
        description: Authorization information for the request. Format- `HMAC {hmacToken}`
        required: true
        schema:
          type: string
      - name: Client-Token
        in: header
        description: Used to pass the original client OAuth token information given
          in a client-credentials flow.  This field is only used when the server is
          making the request and needs to link the transaction to a specific client.  Format-
          `Bearer {access_token}`
        schema:
          type: string
      - name: Client-Request-Id
        in: header
        description: Contains a unique ID generated by the client that can be used
          for enforcing idempotency on POST actions. POSTs are inherently non-idempotent
          and submitting the exact same request multiple times would create duplicate
          resources. Note:- Omitting this header increases the risk of duplicate transactions,
          which for payments could cost the client issues like double-billing.
        required: true
        schema:
          type: string
      - name: fdAuthorizationId
        in: path
        description: Unique identifier provided for the payment authorization
        required: true
        schema:
          type: string
      - name: Retailer-Partner-Id
        in: header
        description: Retailer partner identification for marketplace
        schema:
          type: string
      - name: Accept-Language
        in: header
        description: The Accept-Language header contains information about the language
          preference of a user. This HTTP header is useful to multilingual sites for
          deciding the best language to serve to the client. i.e en-US,fr-CA
        schema:
          type: string
      - name: Sub-Merchant-Id
        in: header
        description: Sub Merchant Id contains information about the merchant identifier
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CaptureRequest'
        required: false
      responses:
        201:
          description: Resource created
          headers:
            Location:
              description: Location of newly created resource.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Capture'
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: Unauthorized
          content: {}
        409:
          description: Conflict - The requested operation conflicts with the current
            state of the identified resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: An unexpected server error occured.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-codegen-request-body-name: payload
  /v1/payments/auths/{fdAuthorizationId}/refunds:
    post:
      x-group-name: Payment Services
      x-proxy-name: Refund payment authorization
      tags:
      - authorization
      summary: Execute a refund on a payment authorization.
      description: Execute a refund on a payment authorization .
      parameters:
      - name: Api-Key
        in: header
        description: An API key is a string value passed by a client app to the API
          proxies. The key uniquely identifies the client app.
        required: true
        schema:
          type: string
      - name: Timestamp
        in: header
        description: Epoch timestamp in the request initiating system
        required: true
        schema:
          type: string
      - name: Authorization
        in: header
        description: Authorization information for the request. Format- `HMAC {hmacToken}`
        required: true
        schema:
          type: string
      - name: Client-Token
        in: header
        description: Used to pass the original client OAuth token information given
          in a client-credentials flow.  This field is only used when the server is
          making the request and needs to link the transaction to a specific client.  Format-
          `Bearer {access_token}`
        schema:
          type: string
      - name: Client-Request-Id
        in: header
        description: Contains a unique ID generated by the client that can be used
          for enforcing idempotency on POST actions. POSTs are inherently non-idempotent
          and submitting the exact same request multiple times would create duplicate
          resources. Note:- Omitting this header increases the risk of duplicate transactions,
          which for payments could cost the client issues like double-billing.
        required: true
        schema:
          type: string
      - name: fdAuthorizationId
        in: path
        description: Unique identifier provided for the payment authorization
        required: true
        schema:
          type: string
      - name: Retailer-Partner-Id
        in: header
        description: Retailer partner identification for marketplace
        schema:
          type: string
      - name: Accept-Language
        in: header
        description: The Accept-Language header contains information about the language
          preference of a user. This HTTP header is useful to multilingual sites for
          deciding the best language to serve to the client. i.e en-US,fr-CA
        schema:
          type: string
      - name: Sub-Merchant-Id
        in: header
        description: Sub Merchant Id contains information about the merchant identifier
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefundRequest'
        required: false
      responses:
        201:
          description: Resource created
          headers:
            Location:
              description: Location of newly created resource.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Refund'
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: Unauthorized
          content: {}
        409:
          description: Conflict - The requested operation conflicts with the current
            state of the identified resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: An unexpected server error occured.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-codegen-request-body-name: payload
  /v1/payments/captures:
    get:
      x-group-name: Payment Services
      x-proxy-name: Get captured payment details
      tags:
      - capture
      summary: Get payment capture details.
      description: Fetch captured payment details with a capture id.
      parameters:
      - name: Api-Key
        in: header
        description: An API key is a string value passed by a client app to the API
          proxies. The key uniquely identifies the client app.
        required: true
        schema:
          type: string
      - name: Timestamp
        in: header
        description: Epoch timestamp in the request initiating system
        required: true
        schema:
          type: string
      - name: Authorization
        in: header
        description: Authorization information for the request. Format- `HMAC {hmacToken}`
        required: true
        schema:
          type: string
      - name: Client-Token
        in: header
        description: Used to pass the original client OAuth token information given
          in a client-credentials flow.  This field is only used when the server is
          making the request and needs to link the transaction to a specific client.  Format-
          `Bearer {access_token}`
        schema:
          type: string
      - name: Retailer-Partner-Id
        in: header
        description: Retailer partner identification for marketplace
        schema:
          type: string
      - name: Accept-Language
        in: header
        description: The Accept-Language header contains information about the language
          preference of a user. This HTTP header is useful to multilingual sites for
          deciding the best language to serve to the client. i.e en-US,fr-CA
        schema:
          type: string
      - name: clientRequestId
        in: query
        description: Contains a unique ID generated by the client that can be used
          for enforcing idempotency on POST actions.
        schema:
          type: string
      - name: Sub-Merchant-Id
        in: header
        description: Sub Merchant Id contains information about the merchant identifier
        schema:
          type: string
      responses:
        200:
          description: Resource created
          headers:
            Location:
              description: Location of newly created resource.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Capture'
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: Unauthorized
          content: {}
        404:
          description: Not Found - The requested resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /v1/payments/captures/{fdCaptureId}:
    get:
      x-group-name: Payment Services
      x-proxy-name: Get payment capture details
      tags:
      - capture
      summary: Get payment capture details.
      description: Fetch captured payment details with a capture id.
      parameters:
      - name: Api-Key
        in: header
        description: An API key is a string value passed by a client app to the API
          proxies. The key uniquely identifies the client app.
        required: true
        schema:
          type: string
      - name: Timestamp
        in: header
        description: Epoch timestamp in the request initiating system
        required: true
        schema:
          type: string
      - name: Authorization
        in: header
        description: Authorization information for the request. Format- `HMAC {hmacToken}`
        required: true
        schema:
          type: string
      - name: Client-Token
        in: header
        description: Used to pass the original client OAuth token information given
          in a client-credentials flow.  This field is only used when the server is
          making the request and needs to link the transaction to a specific client.  Format-
          `Bearer {access_token}`
        schema:
          type: string
      - name: fdCaptureId
        in: path
        description: Unique identifier provided for a payment capture.
        required: true
        schema:
          type: string
      - name: Retailer-Partner-Id
        in: header
        description: Retailer partner identification for marketplace
        schema:
          type: string
      - name: Accept-Language
        in: header
        description: The Accept-Language header contains information about the language
          preference of a user. This HTTP header is useful to multilingual sites for
          deciding the best language to serve to the client. i.e en-US,fr-CA
        schema:
          type: string
      - name: Sub-Merchant-Id
        in: header
        description: Sub Merchant Id contains information about the merchant identifier
        schema:
          type: string
      responses:
        200:
          description: Resource created
          headers:
            Location:
              description: Location of newly created resource.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Capture'
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: Unauthorized
          content: {}
        404:
          description: Not Found - The requested resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /v1/payments/captures/{fdCaptureId}/void:
    post:
      x-group-name: Payment Services
      x-proxy-name: Void payment capture
      tags:
      - capture
      summary: Execute an action on a payment capture
      description: Used to void the capture.
      parameters:
      - name: Api-Key
        in: header
        description: An API key is a string value passed by a client app to the API
          proxies. The key uniquely identifies the client app.
        required: true
        schema:
          type: string
      - name: Timestamp
        in: header
        description: Epoch timestamp in the request initiating system
        required: true
        schema:
          type: string
      - name: Authorization
        in: header
        description: Authorization information for the request. Format- `HMAC {hmacToken}`
        required: true
        schema:
          type: string
      - name: Client-Token
        in: header
        description: Used to pass the original client OAuth token information given
          in a client-credentials flow.  This field is only used when the server is
          making the request and needs to link the transaction to a specific client.  Format-
          `Bearer {access_token}`
        schema:
          type: string
      - name: Client-Request-Id
        in: header
        description: Contains a unique ID generated by the client that can be used
          for enforcing idempotency on POST actions. POSTs are inherently non-idempotent
          and submitting the exact same request multiple times would create duplicate
          resources. Note:- Omitting this header increases the risk of duplicate transactions,
          which for payments could cost the client issues like double-billing.
        required: true
        schema:
          type: string
      - name: fdCaptureId
        in: path
        description: Unique identifier provided for a payment capture.
        required: true
        schema:
          type: string
      - name: Retailer-Partner-Id
        in: header
        description: Retailer partner identification for marketplace
        schema:
          type: string
      - name: Accept-Language
        in: header
        description: The Accept-Language header contains information about the language
          preference of a user. This HTTP header is useful to multilingual sites for
          deciding the best language to serve to the client. i.e en-US,fr-CA
        schema:
          type: string
      - name: Sub-Merchant-Id
        in: header
        description: Sub Merchant Id contains information about the merchant identifier
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VoidRequest'
        required: false
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Capture'
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: Unauthorized
          content: {}
        404:
          description: Not Found - The requested resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: An unexpected server error occured.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-codegen-request-body-name: payload
  /v1/payments/captures/{fdCaptureId}/refunds:
    post:
      x-group-name: Payment Services
      x-proxy-name: Refund a capture
      tags:
      - capture
      summary: Execute a refund on a payment capture.
      description: Refund a capture .
      parameters:
      - name: Api-Key
        in: header
        description: An API key is a string value passed by a client app to the API
          proxies. The key uniquely identifies the client app.
        required: true
        schema:
          type: string
      - name: Timestamp
        in: header
        description: Epoch timestamp in the request initiating system
        required: true
        schema:
          type: string
      - name: Authorization
        in: header
        description: Authorization information for the request. Format- `HMAC {hmacToken}`
        required: true
        schema:
          type: string
      - name: Client-Token
        in: header
        description: Used to pass the original client OAuth token information given
          in a client-credentials flow.  This field is only used when the server is
          making the request and needs to link the transaction to a specific client.  Format-
          `Bearer {access_token}`
        schema:
          type: string
      - name: Client-Request-Id
        in: header
        description: Contains a unique ID generated by the client that can be used
          for enforcing idempotency on POST actions. POSTs are inherently non-idempotent
          and submitting the exact same request multiple times would create duplicate
          resources. Note:- Omitting this header increases the risk of duplicate transactions,
          which for payments could cost the client issues like double-billing.
        required: true
        schema:
          type: string
      - name: fdCaptureId
        in: path
        description: Unique identifier provided for a payment capture.
        required: true
        schema:
          type: string
      - name: Retailer-Partner-Id
        in: header
        description: Retailer partner identification for marketplace
        schema:
          type: string
      - name: Accept-Language
        in: header
        description: The Accept-Language header contains information about the language
          preference of a user. This HTTP header is useful to multilingual sites for
          deciding the best language to serve to the client. i.e en-US,fr-CA
        schema:
          type: string
      - name: Sub-Merchant-Id
        in: header
        description: Sub Merchant Id contains information about the merchant identifier
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefundRequest'
        required: false
      responses:
        201:
          description: Resource created
          headers:
            Location:
              description: Location of newly created resource.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Refund'
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: Unauthorized
          content: {}
        409:
          description: Conflict - The requested operation conflicts with the current
            state of the identified resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: An unexpected server error occured.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-codegen-request-body-name: payload
  /v1/payments/sales:
    get:
      x-group-name: Payment Services
      x-proxy-name: Get sale transaction
      tags:
      - sale
      summary: Get a specific sale transaction.
      description: Fetch a Sale detail object
      parameters:
      - name: Api-Key
        in: header
        description: An API key is a string value passed by a client app to the API
          proxies. The key uniquely identifies the client app.
        required: true
        schema:
          type: string
      - name: Timestamp
        in: header
        description: Epoch timestamp in the request initiating system
        required: true
        schema:
          type: string
      - name: Authorization
        in: header
        description: Authorization information for the request. Format- `HMAC {hmacToken}`
        required: true
        schema:
          type: string
      - name: Client-Token
        in: header
        description: Used to pass the original client OAuth token information given
          in a client-credentials flow.  This field is only used when the server is
          making the request and needs to link the transaction to a specific client.  Format-
          `Bearer {access_token}`
        schema:
          type: string
      - name: Retailer-Partner-Id
        in: header
        description: Retailer partner identification for marketplace
        schema:
          type: string
      - name: Accept-Language
        in: header
        description: The Accept-Language header contains information about the language
          preference of a user. This HTTP header is useful to multilingual sites for
          deciding the best language to serve to the client. i.e en-US,fr-CA
        schema:
          type: string
      - name: clientRequestId
        in: query
        description: Contains a unique ID generated by the client that can be used
          for enforcing idempotency on POST actions.
        schema:
          type: string
      - name: Sub-Merchant-Id
        in: header
        description: Sub Merchant Id contains information about the merchant identifier
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sale'
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: Unauthorized
          content: {}
        404:
          description: Not Found - The requested resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: An unexpected server error occured.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      x-group-name: Payment Services
      x-proxy-name: Create payment sale transacation
      tags:
      - sale
      summary: Create a payment sale transaction.
      description: Must include a funding source and requested amount greater than
        0.
      parameters:
      - name: Api-Key
        in: header
        description: An API key is a string value passed by a client app to the API
          proxies. The key uniquely identifies the client app.
        required: true
        schema:
          type: string
      - name: Timestamp
        in: header
        description: Epoch timestamp in the request initiating system
        required: true
        schema:
          type: string
      - name: Authorization
        in: header
        description: Authorization information for the request. Format- `HMAC {hmacToken}`
        required: true
        schema:
          type: string
      - name: Client-Token
        in: header
        description: Used to pass the original client OAuth token information given
          in a client-credentials flow.  This field is only used when the server is
          making the request and needs to link the transaction to a specific client.  Format-
          `Bearer {access_token}`
        schema:
          type: string
      - name: Client-Request-Id
        in: header
        description: Contains a unique ID generated by the client that can be used
          for enforcing idempotency on POST actions. POSTs are inherently non-idempotent
          and submitting the exact same request multiple times would create duplicate
          resources. Note:- Omitting this header increases the risk of duplicate transactions,
          which for payments could cost the client issues like double-billing.
        required: true
        schema:
          type: string
      - name: Retailer-Partner-Id
        in: header
        description: Retailer partner identification for marketplace
        schema:
          type: string
      - name: Accept-Language
        in: header
        description: The Accept-Language header contains information about the language
          preference of a user. This HTTP header is useful to multilingual sites for
          deciding the best language to serve to the client. i.e en-US,fr-CA
        schema:
          type: string
      - name: Sub-Merchant-Id
        in: header
        description: Sub Merchant Id contains information about the merchant identifier
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SaleRequest'
        required: true
      responses:
        201:
          description: Resource created
          headers:
            Location:
              description: Location of newly created resource.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sale'
        202:
          description: Partially created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sale'
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: Unauthorized
          content: {}
        409:
          description: Conflict - The requested operation conflicts with the current
            state of the identified resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: An unexpected server error occured.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-codegen-request-body-name: payload
  /v1/payments/sales/{fdSaleId}:
    get:
      x-group-name: Payment Services
      x-proxy-name: Get sale details
      tags:
      - sale
      summary: Get a specific sale transaction.
      description: Fetch a Sale detail object
      parameters:
      - name: Api-Key
        in: header
        description: An API key is a string value passed by a client app to the API
          proxies. The key uniquely identifies the client app.
        required: true
        schema:
          type: string
      - name: Timestamp
        in: header
        description: Epoch timestamp in the request initiating system
        required: true
        schema:
          type: string
      - name: Authorization
        in: header
        description: Authorization information for the request. Format- `HMAC {hmacToken}`
        required: true
        schema:
          type: string
      - name: Client-Token
        in: header
        description: Used to pass the original client OAuth token information given
          in a client-credentials flow.  This field is only used when the server is
          making the request and needs to link the transaction to a specific client.  Format-
          `Bearer {access_token}`
        schema:
          type: string
      - name: fdSaleId
        in: path
        description: Unique identifier provided for a sale transaction.
        required: true
        schema:
          type: string
      - name: Retailer-Partner-Id
        in: header
        description: Retailer partner identification for marketplace
        schema:
          type: string
      - name: Accept-Language
        in: header
        description: The Accept-Language header contains information about the language
          preference of a user. This HTTP header is useful to multilingual sites for
          deciding the best language to serve to the client. i.e en-US,fr-CA
        schema:
          type: string
      - name: Sub-Merchant-Id
        in: header
        description: Sub Merchant Id contains information about the merchant identifier
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sale'
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: Unauthorized
          content: {}
        404:
          description: Not Found - The requested resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: An unexpected server error occured.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      x-group-name: Payment Services
      x-proxy-name: Proceed with sale transaction
      tags:
      - sale
      summary: Patch a specific sale transaction.
      description: Proceed sale transaction with specific action type
      parameters:
      - name: Api-Key
        in: header
        description: An API key is a string value passed by a client app to the API
          proxies. The key uniquely identifies the client app.
        required: true
        schema:
          type: string
      - name: Timestamp
        in: header
        description: Epoch timestamp in the request initiating system
        required: true
        schema:
          type: string
      - name: Authorization
        in: header
        description: Authorization information for the request. Format- `HMAC {hmacToken}`
        required: true
        schema:
          type: string
      - name: Client-Token
        in: header
        description: Used to pass the original client OAuth token information given
          in a client-credentials flow.  This field is only used when the server is
          making the request and needs to link the transaction to a specific client.  Format-
          `Bearer {access_token}`
        schema:
          type: string
      - name: fdSaleId
        in: path
        description: Unique identifier provided for a sale transaction.
        required: true
        schema:
          type: string
      - name: Retailer-Partner-Id
        in: header
        description: Retailer partner identification for marketplace
        schema:
          type: string
      - name: Accept-Language
        in: header
        description: The Accept-Language header contains information about the language
          preference of a user. This HTTP header is useful to multilingual sites for
          deciding the best language to serve to the client. i.e en-US,fr-CA
        schema:
          type: string
      - name: Sub-Merchant-Id
        in: header
        description: Sub Merchant Id contains information about the merchant identifier
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                action:
                  $ref: '#/components/schemas/UpdateActionType'
                threeDSecureInfo:
                  $ref: '#/components/schemas/ThreeDSecure'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sale'
        204:
          description: The request succeeded but there's really nothing to show.
          content: {}
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: Unauthorized
          content: {}
        404:
          description: Not Found - The requested resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: An unexpected server error occured.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-codegen-request-body-name: payload
  /v1/payments/sales/{fdSaleId}/void:
    post:
      x-group-name: Payment Services
      x-proxy-name: Cancel/Void sale transaction
      tags:
      - sale
      summary: Execute an action on a specific sale transaction.
      description: Used to cancel/void a sale transaction.
      parameters:
      - name: Api-Key
        in: header
        description: An API key is a string value passed by a client app to the API
          proxies. The key uniquely identifies the client app.
        required: true
        schema:
          type: string
      - name: Timestamp
        in: header
        description: Epoch timestamp in the request initiating system
        required: true
        schema:
          type: string
      - name: Authorization
        in: header
        description: Authorization information for the request. Format- `HMAC {hmacToken}`
        required: true
        schema:
          type: string
      - name: Client-Token
        in: header
        description: Used to pass the original client OAuth token information given
          in a client-credentials flow.  This field is only used when the server is
          making the request and needs to link the transaction to a specific client.  Format-
          `Bearer {access_token}`
        schema:
          type: string
      - name: fdSaleId
        in: path
        description: Unique identifier provided for a sale transaction.
        required: true
        schema:
          type: string
      - name: Retailer-Partner-Id
        in: header
        description: Retailer partner identification for marketplace
        schema:
          type: string
      - name: Accept-Language
        in: header
        description: The Accept-Language header contains information about the language
          preference of a user. This HTTP header is useful to multilingual sites for
          deciding the best language to serve to the client. i.e en-US,fr-CA
        schema:
          type: string
      - name: Sub-Merchant-Id
        in: header
        description: Sub Merchant Id contains information about the merchant identifier
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VoidRequest'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sale'
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: Unauthorized
          content: {}
        404:
          description: Not Found - The requested resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: An unexpected server error occured.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-codegen-request-body-name: payload
  /v1/payments/sales/{fdSaleId}/refunds:
    post:
      x-group-name: Refunds
      x-proxy-name: Refund a Sale Transaction
      x-child-product-name: Payment Services
      tags:
      - sale
      summary: Execute a refund on a payment capture.
      description: Refund a 'sale' transaction.
      parameters:
      - name: Api-Key
        in: header
        description: An API key is a string value passed by a client app to the API
          proxies. The key uniquely identifies the client app.
        required: true
        schema:
          type: string
      - name: Timestamp
        in: header
        description: Epoch timestamp in the request initiating system
        required: true
        schema:
          type: string
      - name: Authorization
        in: header
        description: Authorization information for the request. Format- `HMAC {hmacToken}`
        required: true
        schema:
          type: string
      - name: Client-Token
        in: header
        description: Used to pass the original client OAuth token information given
          in a client-credentials flow.  This field is only used when the server is
          making the request and needs to link the transaction to a specific client.  Format-
          `Bearer {access_token}`
        schema:
          type: string
      - name: Client-Request-Id
        in: header
        description: Contains a unique ID generated by the client that can be used
          for enforcing idempotency on POST actions. POSTs are inherently non-idempotent
          and submitting the exact same request multiple times would create duplicate
          resources. Note:- Omitting this header increases the risk of duplicate transactions,
          which for payments could cost the client issues like double-billing.
        required: true
        schema:
          type: string
      - name: fdSaleId
        in: path
        description: Unique identifier provided for a sale transaction.
        required: true
        schema:
          type: string
      - name: Retailer-Partner-Id
        in: header
        description: Retailer partner identification for marketplace
        schema:
          type: string
      - name: Accept-Language
        in: header
        description: The Accept-Language header contains information about the language
          preference of a user. This HTTP header is useful to multilingual sites for
          deciding the best language to serve to the client. i.e en-US,fr-CA
        schema:
          type: string
      - name: Sub-Merchant-Id
        in: header
        description: Sub Merchant Id contains information about the merchant identifier
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefundRequest'
        required: false
      responses:
        201:
          description: Resource created
          headers:
            Location:
              description: Location of newly created resource.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Refund'
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: Unauthorized
          content: {}
        409:
          description: Conflict - The requested operation conflicts with the current
            state of the identified resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: An unexpected server error occured.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-codegen-request-body-name: payload
  /v2/payments/multi-sales:
    post:
      x-group-name: Payment Services
      x-proxy-name: Create multiple payment sale transactions
      tags:
      - sale
      summary: Create multiple payment sale transactions.
      description: Must include a funding source and requested amount greater than
        0 for each payment sale
      parameters:
      - name: Api-Key
        in: header
        description: An API key is a string value passed by a client app to the API
          proxies. The key uniquely identifies the client app.
        required: true
        schema:
          type: string
      - name: Timestamp
        in: header
        description: Epoch timestamp in the request initiating system
        required: true
        schema:
          type: string
      - name: Authorization
        in: header
        description: Authorization information for the request. Format- `HMAC {hmacToken}`
        required: true
        schema:
          type: string
      - name: Client-Token
        in: header
        description: Used to pass the original client OAuth token information given
          in a client-credentials flow.  This field is only used when the server is
          making the request and needs to link the transaction to a specific client.  Format-
          `Bearer {access_token}`
        schema:
          type: string
      - name: Client-Request-Id
        in: header
        description: Contains a unique ID generated by the client that can be used
          for enforcing idempotency on POST actions. POSTs are inherently non-idempotent
          and submitting the exact same request multiple times would create duplicate
          resources. Note:- Omitting this header increases the risk of duplicate transactions,
          which for payments could cost the client issues like double-billing.
        required: true
        schema:
          type: string
      - name: Retailer-Partner-Id
        in: header
        description: Retailer partner identification for marketplace
        schema:
          type: string
      - name: Accept-Language
        in: header
        description: The Accept-Language header contains information about the language
          preference of a user. This HTTP header is useful to multilingual sites for
          deciding the best language to serve to the client. i.e en-US,fr-CA
        schema:
          type: string
      - name: Sub-Merchant-Id
        in: header
        description: Sub Merchant Id contains information about the merchant identifier
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MultiSaleRequest'
        required: true
      responses:
        201:
          description: Sale created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MultiSale'
        207:
          description: Multiple status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MultiSale'
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: Unauthorized
          content: {}
        409:
          description: Conflict - The requested operation conflicts with the current
            state of the identified resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        425:
          description: Request is too early to process.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: An unexpected server error occured.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-codegen-request-body-name: payload
  /v2/payments/multi-sales/{fdParentTransactionId}/refunds:
    post:
      x-group-name: Payment Services
      x-proxy-name: Refund multi sale transactions
      tags:
      - sale
      summary: Execute a refund for multi sale transactions.
      description: Refund a 'multi-sale' transaction.
      parameters:
      - name: Api-Key
        in: header
        description: An API key is a string value passed by a client app to the API
          proxies. The key uniquely identifies the client app.
        required: true
        schema:
          type: string
      - name: Timestamp
        in: header
        description: Epoch timestamp in the request initiating system
        required: true
        schema:
          type: string
      - name: Authorization
        in: header
        description: Authorization information for the request. Format- `HMAC {hmacToken}`
        required: true
        schema:
          type: string
      - name: Client-Token
        in: header
        description: Used to pass the original client OAuth token information given
          in a client-credentials flow.  This field is only used when the server is
          making the request and needs to link the transaction to a specific client.  Format-
          `Bearer {access_token}`
        schema:
          type: string
      - name: Client-Request-Id
        in: header
        description: Contains a unique ID generated by the client that can be used
          for enforcing idempotency on POST actions. POSTs are inherently non-idempotent
          and submitting the exact same request multiple times would create duplicate
          resources. Note:- Omitting this header increases the risk of duplicate transactions,
          which for payments could cost the client issues like double-billing.
        required: true
        schema:
          type: string
      - name: fdParentTransactionId
        in: path
        description: Unique identifier provided for a parent transaction.
        required: true
        schema:
          type: string
      - name: Retailer-Partner-Id
        in: header
        description: Retailer partner identification for marketplace
        schema:
          type: string
      - name: Accept-Language
        in: header
        description: The Accept-Language header contains information about the language
          preference of a user. This HTTP header is useful to multilingual sites for
          deciding the best language to serve to the client. i.e en-US,fr-CA
        schema:
          type: string
      - name: Sub-Merchant-Id
        in: header
        description: Sub Merchant Id contains information about the merchant identifier
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MultiRefundRequest'
        required: false
      responses:
        201:
          description: Refund transaction response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MultiRefund'
        207:
          description: Partial Refund transaction response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MultiRefund'
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: Unauthorized
          content: {}
        409:
          description: Conflict - The requested operation conflicts with the current
            state of the identified resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: An unexpected server error occured.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-codegen-request-body-name: payload
  /v2/payments/multi-sales/{fdParentTransactionId}/void:
    post:
      x-group-name: Payment Services
      x-proxy-name: Void multi-sale transaction
      tags:
      - sale
      summary: Execute void for multi sale transactions.
      description: Void a 'multi-sale' transaction.
      parameters:
      - name: Api-Key
        in: header
        description: An API key is a string value passed by a client app to the API
          proxies. The key uniquely identifies the client app.
        required: true
        schema:
          type: string
      - name: Timestamp
        in: header
        description: Epoch timestamp in the request initiating system
        required: true
        schema:
          type: string
      - name: Authorization
        in: header
        description: Authorization information for the request. Format- `HMAC {hmacToken}`
        required: true
        schema:
          type: string
      - name: Client-Token
        in: header
        description: Used to pass the original client OAuth token information given
          in a client-credentials flow.  This field is only used when the server is
          making the request and needs to link the transaction to a specific client.  Format-
          `Bearer {access_token}`
        schema:
          type: string
      - name: fdParentTransactionId
        in: path
        description: Unique identifier provided for a parent transaction.
        required: true
        schema:
          type: string
      - name: Client-Request-Id
        in: header
        description: Contains a unique ID generated by the client that can be used
          for enforcing idempotency on POST actions. POSTs are inherently non-idempotent
          and submitting the exact same request multiple times would create duplicate
          resources. Note:- Omitting this header increases the risk of duplicate transactions,
          which for payments could cost the client issues like double-billing.
        required: true
        schema:
          type: string
      - name: Retailer-Partner-Id
        in: header
        description: Retailer partner identification for marketplace
        schema:
          type: string
      - name: Accept-Language
        in: header
        description: The Accept-Language header contains information about the language
          preference of a user. This HTTP header is useful to multilingual sites for
          deciding the best language to serve to the client. i.e en-US,fr-CA
        schema:
          type: string
      - name: Sub-Merchant-Id
        in: header
        description: Sub Merchant Id contains information about the merchant identifier
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MultiVoidRequest'
        required: true
      responses:
        200:
          description: Void transaction response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MultiVoid'
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: Unauthorized
          content: {}
        404:
          description: Not Found - The requested resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: An unexpected server error occured.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-codegen-request-body-name: payload
  /v1/payments/refunds:
    get:
      x-group-name: Payment Services
      x-proxy-name: Get refund details
      tags:
      - refund
      summary: Get refund transaction details
      description: Fetch the refund transaction details with the refund id.
      parameters:
      - name: Api-Key
        in: header
        description: An API key is a string value passed by a client app to the API
          proxies. The key uniquely identifies the client app.
        required: true
        schema:
          type: string
      - name: Timestamp
        in: header
        description: Epoch timestamp in the request initiating system
        required: true
        schema:
          type: string
      - name: Authorization
        in: header
        description: Authorization information for the request. Format- `HMAC {hmacToken}`
        required: true
        schema:
          type: string
      - name: Client-Token
        in: header
        description: Used to pass the original client OAuth token information given
          in a client-credentials flow.  This field is only used when the server is
          making the request and needs to link the transaction to a specific client.  Format-
          `Bearer {access_token}`
        schema:
          type: string
      - name: Retailer-Partner-Id
        in: header
        description: Retailer partner identification for marketplace
        schema:
          type: string
      - name: Accept-Language
        in: header
        description: The Accept-Language header contains information about the language
          preference of a user. This HTTP header is useful to multilingual sites for
          deciding the best language to serve to the client. i.e en-US,fr-CA
        schema:
          type: string
      - name: clientRequestId
        in: query
        description: Contains a unique ID generated by the client that can be used
          for enforcing idempotency on POST actions.
        schema:
          type: string
      - name: Sub-Merchant-Id
        in: header
        description: Sub Merchant Id contains information about the merchant identifier
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Refund'
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: Unauthorized
          content: {}
        404:
          description: Not Found - The requested resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /v1/payments/refunds/{fdRefundId}:
    get:
      x-group-name: Payment Services
      x-proxy-name: Get refund transaction details
      tags:
      - refund
      summary: Get refund transaction details
      description: Fetch the refund transaction details with the refund id.
      parameters:
      - name: Api-Key
        in: header
        description: An API key is a string value passed by a client app to the API
          proxies. The key uniquely identifies the client app.
        required: true
        schema:
          type: string
      - name: Timestamp
        in: header
        description: Epoch timestamp in the request initiating system
        required: true
        schema:
          type: string
      - name: Authorization
        in: header
        description: Authorization information for the request. Format- `HMAC {hmacToken}`
        required: true
        schema:
          type: string
      - name: Client-Token
        in: header
        description: Used to pass the original client OAuth token information given
          in a client-credentials flow.  This field is only used when the server is
          making the request and needs to link the transaction to a specific client.  Format-
          `Bearer {access_token}`
        schema:
          type: string
      - name: fdRefundId
        in: path
        description: Unique identifier provided for a refund.
        required: true
        schema:
          type: string
      - name: Retailer-Partner-Id
        in: header
        description: Retailer partner identification for marketplace
        schema:
          type: string
      - name: Accept-Language
        in: header
        description: The Accept-Language header contains information about the language
          preference of a user. This HTTP header is useful to multilingual sites for
          deciding the best language to serve to the client. i.e en-US,fr-CA
        schema:
          type: string
      - name: Sub-Merchant-Id
        in: header
        description: Sub Merchant Id contains information about the merchant identifier
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Refund'
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: Unauthorized
          content: {}
        404:
          description: Not Found - The requested resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /v1/payments/refunds/{fdRefundId}/void:
    post:
      x-group-name: Payment Services
      x-proxy-name: Cancel Refund
      tags:
      - refund
      summary: Execute an action on payment refund.
      description: Used to cancel the refund.
      parameters:
      - name: Api-Key
        in: header
        description: An API key is a string value passed by a client app to the API
          proxies. The key uniquely identifies the client app.
        required: true
        schema:
          type: string
      - name: Timestamp
        in: header
        description: Epoch timestamp in the request initiating system
        required: true
        schema:
          type: string
      - name: Authorization
        in: header
        description: Authorization information for the request. Format- `HMAC {hmacToken}`
        required: true
        schema:
          type: string
      - name: Client-Token
        in: header
        description: Used to pass the original client OAuth token information given
          in a client-credentials flow.  This field is only used when the server is
          making the request and needs to link the transaction to a specific client.  Format-
          `Bearer {access_token}`
        schema:
          type: string
      - name: Client-Request-Id
        in: header
        description: Contains a unique ID generated by the client that can be used
          for enforcing idempotency on POST actions. POSTs are inherently non-idempotent
          and submitting the exact same request multiple times would create duplicate
          resources. Note:- Omitting this header increases the risk of duplicate transactions,
          which for payments could cost the client issues like double-billing.
        required: true
        schema:
          type: string
      - name: fdRefundId
        in: path
        description: Unique identifier provided for a refund.
        required: true
        schema:
          type: string
      - name: Retailer-Partner-Id
        in: header
        description: Retailer partner identification for marketplace
        schema:
          type: string
      - name: Accept-Language
        in: header
        description: The Accept-Language header contains information about the language
          preference of a user. This HTTP header is useful to multilingual sites for
          deciding the best language to serve to the client. i.e en-US,fr-CA
        schema:
          type: string
      - name: Sub-Merchant-Id
        in: header
        description: Sub Merchant Id contains information about the merchant identifier
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VoidRequest'
        required: false
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Refund'
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: Unauthorized
          content: {}
        404:
          description: Not Found - The requested resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: An unexpected server error occured.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-codegen-request-body-name: payload
  /v2/payments/multi-refunds:
    post:
      x-group-name: Payment Services
      x-proxy-name: Refund multi transacation
      tags:
      - refund
      summary: Execute a refund for multi transactions.
      description: Refund a multi transaction.
      parameters:
      - name: Api-Key
        in: header
        description: An API key is a string value passed by a client app to the API
          proxies. The key uniquely identifies the client app.
        required: true
        schema:
          type: string
      - name: Timestamp
        in: header
        description: Epoch timestamp in the request initiating system
        required: true
        schema:
          type: string
      - name: Authorization
        in: header
        description: Authorization information for the request. Format- `HMAC {hmacToken}`
        required: true
        schema:
          type: string
      - name: Client-Token
        in: header
        description: Used to pass the original client OAuth token information given
          in a client-credentials flow.  This field is only used when the server is
          making the request and needs to link the transaction to a specific client.  Format-
          `Bearer {access_token}`
        schema:
          type: string
      - name: Client-Request-Id
        in: header
        description: Contains a unique ID generated by the client that can be used
          for enforcing idempotency on POST actions. POSTs are inherently non-idempotent
          and submitting the exact same request multiple times would create duplicate
          resources. Note:- Omitting this header increases the risk of duplicate transactions,
          which for payments could cost the client issues like double-billing.
        required: true
        schema:
          type: string
      - name: Retailer-Partner-Id
        in: header
        description: Retailer partner identification for marketplace
        schema:
          type: string
      - name: Accept-Language
        in: header
        description: The Accept-Language header contains information about the language
          preference of a user. This HTTP header is useful to multilingual sites for
          deciding the best language to serve to the client. i.e en-US,fr-CA
        schema:
          type: string
      - name: Sub-Merchant-Id
        in: header
        description: Sub Merchant Id contains information about the merchant identifier
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MultiRefundRequest'
        required: false
      responses:
        201:
          description: Refund transaction response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MultiRefund'
        207:
          description: Partial Refund transaction response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MultiRefund'
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: Unauthorized
          content: {}
        409:
          description: Conflict - The requested operation conflicts with the current
            state of the identified resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: An unexpected server error occured.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-codegen-request-body-name: payload
  /v2/payments/multi-refunds/{fdParentTransactionId}/void:
    post:
      x-group-name: Payment Services
      x-proxy-name: Cancel multi refund
      tags:
      - refund
      summary: Execute an action on multi payment refund.
      description: Used to cancel the refunds.
      parameters:
      - name: Api-Key
        in: header
        description: An API key is a string value passed by a client app to the API
          proxies. The key uniquely identifies the client app.
        required: true
        schema:
          type: string
      - name: Timestamp
        in: header
        description: Epoch timestamp in the request initiating system
        required: true
        schema:
          type: string
      - name: Authorization
        in: header
        description: Authorization information for the request. Format- `HMAC {hmacToken}`
        required: true
        schema:
          type: string
      - name: Client-Token
        in: header
        description: Used to pass the original client OAuth token information given
          in a client-credentials flow.  This field is only used when the server is
          making the request and needs to link the transaction to a specific client.  Format-
          `Bearer {access_token}`
        schema:
          type: string
      - name: Client-Request-Id
        in: header
        description: Contains a unique ID generated by the client that can be used
          for enforcing idempotency on POST actions. POSTs are inherently non-idempotent
          and submitting the exact same request multiple times would create duplicate
          resources. Note:- Omitting this header increases the risk of duplicate transactions,
          which for payments could cost the client issues like double-billing.
        required: true
        schema:
          type: string
      - name: fdParentTransactionId
        in: path
        description: Unique identifier provided for a parent transaction.
        required: true
        schema:
          type: string
      - name: Retailer-Partner-Id
        in: header
        description: Retailer partner identification for marketplace
        schema:
          type: string
      - name: Accept-Language
        in: header
        description: The Accept-Language header contains information about the language
          preference of a user. This HTTP header is useful to multilingual sites for
          deciding the best language to serve to the client. i.e en-US,fr-CA
        schema:
          type: string
      - name: Sub-Merchant-Id
        in: header
        description: Sub Merchant Id contains information about the merchant identifier
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MultiVoidRequest'
        required: false
      responses:
        200:
          description: Refund transaction response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MultiVoid'
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: Unauthorized
          content: {}
        404:
          description: Not Found - The requested resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: An unexpected server error occured.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-codegen-request-body-name: payload
  /v1/payments/charges:
    post:
      x-group-name: Payment Services
      x-proxy-name: Get fee details
      tags:
      - charge
      summary: Payment charge details.
      description: Used to get the details about fee charges.
      parameters:
      - name: Api-Key
        in: header
        description: An API key is a string value passed by a client app to the API
          proxies. The key uniquely identifies the client app.
        required: true
        schema:
          type: string
      - name: Timestamp
        in: header
        description: Epoch timestamp in the request initiating system
        required: true
        schema:
          type: string
      - name: Authorization
        in: header
        description: Authorization information for the request. Format- `HMAC {hmacToken}`
        required: true
        schema:
          type: string
      - name: Client-Token
        in: header
        description: Used to pass the original client OAuth token information given
          in a client-credentials flow.  This field is only used when the server is
          making the request and needs to link the transaction to a specific client.  Format-
          `Bearer {access_token}`
        schema:
          type: string
      - name: Client-Request-Id
        in: header
        description: Contains a unique ID generated by the client that can be used
          for enforcing idempotency on POST actions. POSTs are inherently non-idempotent
          and submitting the exact same request multiple times would create duplicate
          resources. Note:- Omitting this header increases the risk of duplicate transactions,
          which for payments could cost the client issues like double-billing.
        required: true
        schema:
          type: string
      - name: Retailer-Partner-Id
        in: header
        description: Retailer partner identification for marketplace
        schema:
          type: string
      - name: Accept-Language
        in: header
        description: The Accept-Language header contains information about the language
          preference of a user. This HTTP header is useful to multilingual sites for
          deciding the best language to serve to the client. i.e en-US,fr-CA
        schema:
          type: string
      - name: Sub-Merchant-Id
        in: header
        description: Sub Merchant Id contains information about the merchant identifier
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChargeRequest'
        required: false
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                minItems: 0
                type: array
                items:
                  $ref: '#/components/schemas/Charge'
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: Unauthorized
          content: {}
        404:
          description: Not Found - The requested resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: An unexpected server error occured.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-codegen-request-body-name: payload
  /v2/payments/void:
    get:
      x-group-name: Payment Services
      x-proxy-name: Void sale transaction
      tags:
      - void
      summary: Execute void for sale transaction.
      description: Void a transaction.
      parameters:
      - name: Api-Key
        in: header
        description: An API key is a string value passed by a client app to the API
          proxies. The key uniquely identifies the client app.
        required: true
        schema:
          type: string
      - name: Timestamp
        in: header
        description: Epoch timestamp in the request initiating system
        required: true
        schema:
          type: string
      - name: Authorization
        in: header
        description: Authorization information for the request. Format- `HMAC {hmacToken}`
        required: true
        schema:
          type: string
      - name: Client-Token
        in: header
        description: Used to pass the original client OAuth token information given
          in a client-credentials flow.  This field is only used when the server is
          making the request and needs to link the transaction to a specific client.  Format-
          `Bearer {access_token}`
        schema:
          type: string
      - name: clientRequestId
        in: query
        description: Contains a unique ID generated by the client that can be used
          for enforcing idempotency on POST actions.
        schema:
          type: string
      - name: Retailer-Partner-Id
        in: header
        description: Retailer partner identification for marketplace
        schema:
          type: string
      - name: Accept-Language
        in: header
        description: The Accept-Language header contains information about the language
          preference of a user. This HTTP header is useful to multilingual sites for
          deciding the best language to serve to the client. i.e en-US,fr-CA
        schema:
          type: string
      - name: Sub-Merchant-Id
        in: header
        description: Sub Merchant Id contains information about the merchant identifier
        schema:
          type: string
      responses:
        200:
          description: Void transaction response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Void'
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: Unauthorized
          content: {}
        404:
          description: Not Found - The requested resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: An unexpected server error occured.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      x-group-name: Payment Services
      x-proxy-name: Void a sale transaction
      tags:
      - void
      summary: Execute void for sale transaction.
      description: Void a transaction.
      parameters:
      - name: Api-Key
        in: header
        description: An API key is a string value passed by a client app to the API
          proxies. The key uniquely identifies the client app.
        required: true
        schema:
          type: string
      - name: Timestamp
        in: header
        description: Epoch timestamp in the request initiating system
        required: true
        schema:
          type: string
      - name: Authorization
        in: header
        description: Authorization information for the request. Format- `HMAC {hmacToken}`
        required: true
        schema:
          type: string
      - name: Client-Token
        in: header
        description: Used to pass the original client OAuth token information given
          in a client-credentials flow.  This field is only used when the server is
          making the request and needs to link the transaction to a specific client.  Format-
          `Bearer {access_token}`
        schema:
          type: string
      - name: Client-Request-Id
        in: header
        description: Contains a unique ID generated by the client that can be used
          for enforcing idempotency on POST actions. POSTs are inherently non-idempotent
          and submitting the exact same request multiple times would create duplicate
          resources. Note:- Omitting this header increases the risk of duplicate transactions,
          which for payments could cost the client issues like double-billing.
        required: true
        schema:
          type: string
      - name: Retailer-Partner-Id
        in: header
        description: Retailer partner identification for marketplace
        schema:
          type: string
      - name: Accept-Language
        in: header
        description: The Accept-Language header contains information about the language
          preference of a user. This HTTP header is useful to multilingual sites for
          deciding the best language to serve to the client. i.e en-US,fr-CA
        schema:
          type: string
      - name: Sub-Merchant-Id
        in: header
        description: Sub Merchant Id contains information about the merchant identifier
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VoidRequest'
        required: true
      responses:
        200:
          description: Void transaction response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Void'
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: Unauthorized
          content: {}
        404:
          description: Not Found - The requested resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: An unexpected server error occured.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-codegen-request-body-name: payload
  /v2/payments/multi-void:
    post:
      x-group-name: Payment Services
      x-proxy-name: Void multi sale transactions
      tags:
      - void
      summary: Execute void for multi sale transactions.
      description: Void a multiple transactions.
      parameters:
      - name: Api-Key
        in: header
        description: An API key is a string value passed by a client app to the API
          proxies. The key uniquely identifies the client app.
        required: true
        schema:
          type: string
      - name: Timestamp
        in: header
        description: Epoch timestamp in the request initiating system
        required: true
        schema:
          type: string
      - name: Authorization
        in: header
        description: Authorization information for the request. Format- `HMAC {hmacToken}`
        required: true
        schema:
          type: string
      - name: Client-Token
        in: header
        description: Used to pass the original client OAuth token information given
          in a client-credentials flow.  This field is only used when the server is
          making the request and needs to link the transaction to a specific client.  Format-
          `Bearer {access_token}`
        schema:
          type: string
      - name: Client-Request-Id
        in: header
        description: Contains a unique ID generated by the client that can be used
          for enforcing idempotency on POST actions. POSTs are inherently non-idempotent
          and submitting the exact same request multiple times would create duplicate
          resources. Note:- Omitting this header increases the risk of duplicate transactions,
          which for payments could cost the client issues like double-billing.
        required: true
        schema:
          type: string
      - name: Retailer-Partner-Id
        in: header
        description: Retailer partner identification for marketplace
        schema:
          type: string
      - name: Accept-Language
        in: header
        description: The Accept-Language header contains information about the language
          preference of a user. This HTTP header is useful to multilingual sites for
          deciding the best language to serve to the client. i.e en-US,fr-CA
        schema:
          type: string
      - name: Sub-Merchant-Id
        in: header
        description: Sub Merchant Id contains information about the merchant identifier
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MultiVoidRequest'
        required: true
      responses:
        200:
          description: Void transaction response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MultiVoid'
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: Unauthorized
          content: {}
        404:
          description: Not Found - The requested resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: An unexpected server error occured.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-codegen-request-body-name: payload
components:
  schemas:
    AuthRequest:
      title: Authorization Request
      type: object
      properties:
        fdCustomerId:
          $ref: '#/components/schemas/FdCustomerId'
        externalCustomerId:
          $ref: '#/components/schemas/ExternalCustomerId'
        authorization:
          $ref: '#/components/schemas/Authorization'
        deviceInfo:
          $ref: '#/components/schemas/DeviceInfo'
    CaptureRequest:
      title: Capture Request
      type: object
      properties:
        fdCustomerId:
          $ref: '#/components/schemas/FdCustomerId'
        externalCustomerId:
          $ref: '#/components/schemas/ExternalCustomerId'
        capture:
          $ref: '#/components/schemas/Capture'
        deviceInfo:
          $ref: '#/components/schemas/DeviceInfo'
    ChargeRequest:
      type: object
      properties:
        stateCode:
          type: string
          description: state code value.
        fundingSource:
          $ref: '#/components/schemas/FundingSource'
        deviceInfo:
          $ref: '#/components/schemas/DeviceInfo'
    MultiSaleRequest:
      type: object
      properties:
        fdCustomerId:
          $ref: '#/components/schemas/FdCustomerId'
        externalCustomerId:
          $ref: '#/components/schemas/ExternalCustomerId'
        parentExternalId:
          type: string
          description: External transaction id reference
        merchantTransactionId:
          type: string
          description: Merchant transaction id
        postDate:
          type: string
          description: Settlement date for the transaction. Format- MMDDYYYY
          format: date
        hostExtraInfo:
          minItems: 0
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/NVP'
        isPartialPaymentAllowed:
          type: boolean
          description: Flag that indicates if partial transaction is allowed or not
        isPartialSuccessAllowed:
          type: boolean
          description: Flag that indicates if partial success is allowed or not
        purchaseInfo:
          $ref: '#/components/schemas/PurchaseInfo'
        replayCount:
          type: number
          description: Indicates request retry attempt count.
        sales:
          type: array
          items:
            $ref: '#/components/schemas/Sale'
        deviceInfo:
          $ref: '#/components/schemas/DeviceInfo'
    MultiRefundRequest:
      type: object
      properties:
        fdCustomerId:
          $ref: '#/components/schemas/FdCustomerId'
        externalCustomerId:
          $ref: '#/components/schemas/ExternalCustomerId'
        parentExternalId:
          type: string
          description: External transaction id reference
        isPartialSuccessAllowed:
          type: boolean
          description: Flag that indicates if partial success is allowed or not
        purchaseInfo:
          $ref: '#/components/schemas/PurchaseInfo'
        replayCount:
          type: number
          description: Indicates request retry attempt count.
        merchantTransactionId:
          type: string
          description: Merchant transaction id
        postDate:
          type: string
          description: Settlement date for the transaction. Format- MMDDYYYY
          format: date
        hostExtraInfo:
          minItems: 0
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/NVP'
        refunds:
          type: array
          items:
            $ref: '#/components/schemas/Refund'
        deviceInfo:
          $ref: '#/components/schemas/DeviceInfo'
    MultiVoidRequest:
      type: object
      properties:
        fdCustomerId:
          $ref: '#/components/schemas/FdCustomerId'
        externalCustomerId:
          $ref: '#/components/schemas/ExternalCustomerId'
        parentExternalId:
          type: string
          description: External transaction id reference
        purchaseInfo:
          $ref: '#/components/schemas/PurchaseInfo'
        replayCount:
          type: number
          description: Indicates request retry attempt count.
        clientRequestId:
          type: string
          description: Client request id that was used in the sale/refund/void
        operationType:
          $ref: '#/components/schemas/OperationType'
        merchantTransactionId:
          type: string
          description: Merchant transaction id
        postDate:
          type: string
          description: Settlement date for the transaction. Format- MMDDYYYY
          format: date
        hostExtraInfo:
          minItems: 0
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/NVP'
        voids:
          type: array
          items:
            $ref: '#/components/schemas/Void'
        deviceInfo:
          $ref: '#/components/schemas/DeviceInfo'
    RefundRequest:
      title: Refund Request
      type: object
      properties:
        fdCustomerId:
          $ref: '#/components/schemas/FdCustomerId'
        externalCustomerId:
          $ref: '#/components/schemas/ExternalCustomerId'
        refund:
          $ref: '#/components/schemas/Refund'
        deviceInfo:
          $ref: '#/components/schemas/DeviceInfo'
    SaleRequest:
      type: object
      properties:
        fdCustomerId:
          $ref: '#/components/schemas/FdCustomerId'
        externalCustomerId:
          $ref: '#/components/schemas/ExternalCustomerId'
        sale:
          $ref: '#/components/schemas/Sale'
        deviceInfo:
          $ref: '#/components/schemas/DeviceInfo'
    VoidRequest:
      type: object
      properties:
        fdCustomerId:
          $ref: '#/components/schemas/FdCustomerId'
        externalCustomerId:
          $ref: '#/components/schemas/ExternalCustomerId'
        deviceInfo:
          $ref: '#/components/schemas/DeviceInfo'
        void:
          $ref: '#/components/schemas/Void'
    ACH:
      type: object
      properties:
        accountNumber:
          type: string
          description: Unique number identifying the ACH account provided by Financial
            institution.
          example: "92658250156"
        routingNumber:
          type: string
          description: Number to identify the financial institution
          example: "999999999"
        secCode:
          type: string
          description: SEC Code is optional data, It is specifically required for
            ACH account which is ruled by NACHA compliance.
        cardNumber:
          type: string
          description: ACH Card number, can only be sent when vaulting an account.  This
            field will NOT be present in responses.
          example: "9111111111111111"
        cardType:
          $ref: '#/components/schemas/AchCardType'
        securityCode:
          type: string
          description: Code to validate the ACH account, like micro deposit or security
            code.
          example: "278356"
        alias:
          type: string
          description: Last four values of the cardNumber
          readOnly: true
          example: "1111"
        enrollmentStatus:
          $ref: '#/components/schemas/AchEnrollmentStatus'
        enrollmentSubStatuses:
          type: array
          items:
            $ref: '#/components/schemas/AchEnrollmentSubStatus'
        accountType:
          $ref: '#/components/schemas/AchAccountType'
        bankName:
          type: string
          description: Name of the bank associated with the ACH account
        expiryDate:
          $ref: '#/components/schemas/ExpiryDate'
        assetProvider:
          $ref: '#/components/schemas/AssetProvider'
      description: Information about an ACH account
    Address:
      type: object
      properties:
        type:
          type: string
          description: Canonical type values of "work", "home", "billing" and "other".
        streetAddress:
          type: string
          description: The full street address component, which may include house
            number, street name, P.O. box, and multi-line extended street address
            information.
        locality:
          type: string
          description: The city or locality component.
        region:
          type: string
          description: The state or region component.
        postalCode:
          type: string
          description: The zip code or postal code component.
        country:
          type: string
          description: The country name component.  When specified, the value MUST
            be in ISO 3166-1 "alpha-2" code format; e.g., the United States and Sweden
            are "US" and "SE", respectively.
        formatted:
          type: string
          description: The full mailing address, formatted for display or use with
            a mailing label.
        primary:
          type: boolean
          description: Indicates if this is the default address for the associated
            resource. It only has meaning when used in a set or array of addresses.
      description: A physical mailing address for this user.
      example:
        type: work
        streetAddress: 100 Universal City Plaza
        locality: Hollywood
        region: CA
        postalCode: "91608"
        country: US
        formatted: |-
          100 Universal City Plaza
          Hollywood, CA 91608 US
        primary: true
    AndroidPay:
      type: object
      properties:
        data:
          type: string
          example: 3CguW5ecfTzO...03d
        signature:
          type: string
          example: MIAGCSqGSIb......AAAA==
        decryptAlias:
          type: string
          description: field of the public key certificate.
          example: oslo.com.xxx.Prod_mer
        dPanLast4:
          type: string
          example: "9876"
        cardType:
          $ref: '#/components/schemas/CreditCardType'
        header:
          type: object
          properties:
            ephemeralPublicKey:
              type: string
              example: MFkwEw...03d
            publicKeyHash:
              type: string
              example: +vbONw...IM=
        token:
          $ref: '#/components/schemas/ReferenceToken'
        billingAddress:
          $ref: '#/components/schemas/Address'
        billingPhone:
          $ref: '#/components/schemas/Phone'
    AmazonPay:
      type: object
      properties:
        token:
          type: string
          example: 292bb6b886fc4446894f878b7e32bd5e
        chargeId:
          type: string
          example: 73883992djj39939djj929992jj08838
        chargeReferenceId:
          type: string
          example: 8jdw838dhhskk9299299299ueuuue838
        credit:
          $ref: '#/components/schemas/Credit'
    ApplePay:
      type: object
      properties:
        version:
          type: string
          example: EC_v1
        developerEmail:
          type: string
        signature:
          type: string
          example: MIAGCSqGSIb......AAAA==
        decryptAlias:
          type: string
          description: field of the public key certificate.
          example: oslo.com.xxx.Prod_mer
        data:
          type: string
          example: 3CguW5ecfTz...Yuhw=
        applicationData:
          type: string
          example: VEVTVA==
        dPanLast4:
          type: string
          example: "9876"
        bin:
          type: string
        eciIndicator:
          type: string
        expiryDate:
          $ref: '#/components/schemas/ExpiryDate'
        panType:
          type: string
        cardType:
          $ref: '#/components/schemas/CreditCardType'
        header:
          type: object
          properties:
            applicationDataHash:
              type: string
            ephemeralPublicKey:
              type: string
              example: MFkwEwYHKoZIzj0CIKoZIz.....NBQQ==
            publicKeyHash:
              type: string
              example: +vbONwRlVqJX0........
            transactionId:
              type: string
              example: 3827c5a02638.....34d50
        token:
          $ref: '#/components/schemas/ReferenceToken'
        billingAddress:
          $ref: '#/components/schemas/Address'
        billingPhone:
          $ref: '#/components/schemas/Phone'
    ApprovedAmount:
      title: Approved Amount
      minimum: 0
      exclusiveMinimum: true
      type: number
      description: Amount authorized according to the request type [auth, capture,
        refund, etc] in lower denomination.  The value is read-only on payment requests.  For
        a void, the value is required.
      format: double
      example: 500.00
    Authorization:
      required:
      - requestedAmount
      type: object
      properties:
        fdAuthorizationId:
          type: string
          description: Unique Identifier provided by payment platform for a payment
            authorization transaction.
          readOnly: true
          example: 8a34144657d0aa6e0157d3808ed000f2
        authStatus:
          $ref: '#/components/schemas/PaymentStatus'
        transactionSubtype:
          type: string
          description: Indicates subtype of a given transaction for EBT, ie EBTCASH
            or EBTSNAP
        merchantId:
          type: string
          description: Merchant identifier where the transaction is being performed.
          example: M117008616001
        altMerchantId:
          type: string
          description: Alternate Merchant identifier where the transaction is being
            performed.
          example: "23232"
        merchantTokenCode:
          type: string
          description: Merchant token code used for token generation
        merchantTerminalId:
          type: string
          description: Merchant terminal identifier
        storeId:
          type: string
          description: Store identifier where the transaction is being performed.
          example: "123456"
        outdoorSale:
          type: boolean
          description: Flag to indicate if the transaction is made outside the store.
          example: true
          default: false
        exemptionCode:
          type: string
          description: Exemption code for 3DS transaction
        transactionOrigin:
          $ref: '#/components/schemas/TransactionOrigin'
        requestedAmount:
          $ref: '#/components/schemas/RequestedAmount'
        approvedAmount:
          $ref: '#/components/schemas/ApprovedAmount'
        currencyCode:
          $ref: '#/components/schemas/ISO-4217'
        dynamicDescriptors:
          $ref: '#/components/schemas/DynamicDescriptors'
        partialPaymentAllowed:
          type: boolean
          description: Flag that indicates if partial transaction is allowed or not
        fundingSource:
          $ref: '#/components/schemas/FundingSource'
        purchaseInfo:
          minItems: 0
          type: array
          items:
            $ref: '#/components/schemas/PurchaseInfo'
        amountSplitInfo:
          $ref: '#/components/schemas/AmountSplitInfo'
        industrySpecificInfo:
          type: object
          properties:
            fuelPurchaseInfo:
              $ref: '#/components/schemas/FuelPurchaseInfo'
          description: Industry specific details like petro for example.
        qrCodeId:
          type: string
          description: Unique Identifier provided by payment platform for a given
            funding source.
        stacId:
          type: string
          description: Unique Identifier provided by payment platform for a given
            funding source.
        transactionDateTime:
          type: string
          description: Date and time of the transaction.
          format: date-time
          readOnly: true
          example: 2016-04-16T16:06:05Z
        createdDateTime:
          type: string
          description: Date and time of resource creation.
          format: date-time
          readOnly: true
          example: 2016-04-16T16:06:05Z
        lastUpdatedDateTime:
          type: string
          description: Last updated Date and time of resource.
          format: date-time
          readOnly: true
          example: 2016-04-16T16:06:05Z
        hostExtraInfo:
          minItems: 0
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/NVP'
        threeDSecureInfo:
          $ref: '#/components/schemas/ThreeDSecure'
        fleetData:
          $ref: '#/components/schemas/FleetData'
        _links:
          minItems: 0
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/Link'
        captures:
          type: array
          description: Array of captures associated with the payment authorization.
          readOnly: true
          items:
            $ref: '#/components/schemas/Capture'
      description: Authorization information - can only be ONE of the funding source
        among account, credit, prepaid, ApplePay.
    AmountSplitInfo:
      type: object
      properties:
        orderAmount:
          minimum: 0
          exclusiveMinimum: true
          type: number
          format: double
        deliveryServiceFee:
          minimum: 0
          exclusiveMinimum: true
          type: number
          format: double
        driverTip:
          minimum: 0
          exclusiveMinimum: true
          type: number
          format: double
        taxAmount:
          minimum: 0
          exclusiveMinimum: true
          type: number
          format: double
        vatAmount:
          minimum: 0
          exclusiveMinimum: true
          type: number
          format: double
        corporateFee:
          minimum: 0
          exclusiveMinimum: true
          type: number
          format: double
      description: Amount split up based on service selected at the time of transaction
    AssetProvider:
      type: object
      properties:
        providerName:
          type: string
          example: coinbase
    Bancontact:
      type: object
      properties:
        returnUrl:
          type: string
        deepLink:
          type: string
        alias:
          type: string
          example: "9876"
        cardType:
          $ref: '#/components/schemas/CreditCardType'
    Capture:
      type: object
      properties:
        fdCaptureId:
          type: string
          description: Unique identifier provided for a payment capture.
          readOnly: true
          example: cap4144657d0aa6e0157d3808ed000f2
        status:
          $ref: '#/components/schemas/PaymentStatus'
        requestedAmount:
          $ref: '#/components/schemas/RequestedAmount'
        approvedAmount:
          $ref: '#/components/schemas/ApprovedAmount'
        currencyCode:
          $ref: '#/components/schemas/ISO-4217'
        dynamicDescriptors:
          $ref: '#/components/schemas/DynamicDescriptors'
        transactionSubtype:
          type: string
          description: Indicates subtype of a given transaction for EBT, ie EBTCASH
            or EBTSNAP
        captureCount:
          type: integer
          description: Specifies the current capture count among the required ones.
            Required only for multi capture transactions.
          format: int32
          example: 1
        captureTotalCount:
          type: integer
          description: Specifies the total captures that are intended to be processed
            in the authorization. Required only for multi capture transactions.
          format: int32
          example: 2
        amountSplitInfo:
          $ref: '#/components/schemas/AmountSplitInfo'
        purchaseInfo:
          minItems: 0
          type: array
          items:
            $ref: '#/components/schemas/PurchaseInfo'
        industrySpecificInfo:
          type: object
          properties:
            fuelPurchaseInfo:
              $ref: '#/components/schemas/FuelPurchaseInfo'
          description: Industry specific details like petro for example.
        transactionDateTime:
          type: string
          description: Date and time of the transaction.
          format: date-time
          readOnly: true
          example: 2016-04-16T16:06:05Z
        createdDateTime:
          type: string
          description: Date and time of resource creation.
          format: date-time
          readOnly: true
          example: 2016-04-16T16:06:05Z
        lastUpdatedDateTime:
          type: string
          description: Last updated Date and time of resource.
          format: date-time
          readOnly: true
          example: 2016-04-16T16:06:05Z
        hostExtraInfo:
          minItems: 0
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/NVP'
        refunds:
          type: array
          description: Array of refunds associated with the payment capture.
          readOnly: true
          items:
            $ref: '#/components/schemas/Refund'
      description: Information related to make a capture on a previous authorization.
        When requested amount not provided the full authorized amount will be applied
        for capture.
    Credit:
      type: object
      properties:
        cardNumber:
          type: string
          description: Primary account number, can only be sent when vaulting an account.  This
            field will NOT be present in responses.
          example: "4111111111111111"
        bin:
          type: string
        nameOnCard:
          type: string
          description: Name as printed on physical card or on virtual account
          example: John Smith
        alias:
          type: string
          description: Last four values of the cardNumber
          readOnly: true
          example: "1111"
        cardType:
          $ref: '#/components/schemas/CreditCardType'
        cardSubType:
          type: string
          description: Merchant or brand specific information about the type of account
          example: ABCD
        billingAddress:
          $ref: '#/components/schemas/Address'
        billingPhone:
          $ref: '#/components/schemas/Phone'
        expiryDate:
          $ref: '#/components/schemas/ExpiryDate'
        securityCode:
          type: string
          example: "444"
        sequenceNumber:
          type: string
          description: Applicable only for private-label accounts
          example: "01"
        token:
          $ref: '#/components/schemas/ReferenceToken'
      description: Information on a credit account
    Charge:
      type: object
      properties:
        verbiage:
          type: string
        returnCheckFee:
          type: string
        returnCheckNote:
          type: string
      description: Transaction charge details
    DeliveryService:
      type: object
      properties:
        deliveryMethod:
          type: string
          description: Delivery method of address provided in the address section,
            NOT_AVAILABLE, DIRECT_DELIVERY, CUSTOMER_PICKUP, COMMERCIAL_SHIPPING,
            OTHER
        indicator:
          type: boolean
        providerName:
          type: string
        providerId:
          type: string
      description: Delivery service information
    DynamicDescriptors:
      type: object
      properties:
        merchantCategoryCode:
          type: string
          description: Merchant category code
        merchantName:
          type: string
          description: Merchant name
        merchantEmail:
          $ref: '#/components/schemas/Email'
        customerServiceNumber:
          $ref: '#/components/schemas/Phone'
        serviceEntitlementNumber:
          type: string
          description: Service entitlement number
        merchantAddress:
          $ref: '#/components/schemas/Address'
    EBT:
      type: object
      properties:
        cardNumber:
          type: string
          description: Primary account number, can only be sent when vaulting an account.  This
            field will NOT be present in responses.
        nameOnCard:
          type: string
          description: Name as printed on physical card or on virtual account
        alias:
          type: string
          description: Last four values of the cardNumber
          readOnly: true
        expiryDate:
          $ref: '#/components/schemas/ExpiryDate'
        bin:
          type: string
          description: BIN of EBT card
          readOnly: true
        pin:
          type: string
          description: PIN for EBT card
        pinCaptureId:
          type: string
          description: Session id used on client side SDK to capture the card pin
        transactionId:
          type: string
          description: The unique transaction ID
        balance:
          $ref: '#/components/schemas/EBTBalance'
        metadata:
          minItems: 0
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/NVP'
        token:
          $ref: '#/components/schemas/ReferenceToken'
      description: Electronic Benefits Transfer card information
    EBTBalance:
      type: object
      properties:
        cashBalance:
          type: number
        cashCurrencyCode:
          $ref: '#/components/schemas/ISO-4217'
        snapBalance:
          type: number
        snapCurrencyCode:
          $ref: '#/components/schemas/ISO-4217'
    Email:
      type: object
      properties:
        type:
          type: string
          description: The "type" sub-attribute is used to provide a classification
            meaningful to the (human) user.  The user interface should encourage the
            use of basic values of "work", "home", and "other" and MAY allow additional
            type values to be used at the discretion of the service client.
        value:
          type: string
          description: The value SHOULD be specified according to RFC5321.
        primary:
          type: boolean
          description: Defines if this entry is to be used as the primary or default
            for the user.
          default: false
      description: Email address for the user.
      example:
        value: bjensen@example.com
        type: work
        primary: true
    ExpiryDate:
      type: object
      properties:
        month:
          maxLength: 2
          minLength: 2
          pattern: '[0-9]{2,2}'
          type: string
          description: Month format 'MM'
          example: "09"
        year:
          maxLength: 2
          minLength: 2
          pattern: '[0-9]{2,2}'
          type: string
          description: Year format 'YY'
          example: "20"
        singleValue:
          maxLength: 6
          minLength: 4
          type: string
          description: Month and year together, 'MMYY' or 'MMYYYY'.  If the latter
            format, the string will be parsed and validated per the given format.  Any
            other format will be rejected.
      description: Contains account expiration data and needs to either send the values
        in individual fields OR as a singleValue.
    ExternalCustomerId:
      title: External Customer ID
      type: string
      description: External customer id.
    FdCustomerId:
      title: FD Customer ID
      type: string
      description: FD customer identifier tied to the vaulted accounts.
      example: cuid-0987613457398475
    Fleet:
      type: object
      properties:
        cardNumber:
          type: string
          description: Primary account number, can only be sent when vaulting an account.  This
            field will NOT be present in responses.
        nameOnCard:
          type: string
          description: Name as printed on physical card or on virtual account
        alias:
          type: string
          description: Card alias
          readOnly: true
        cardType:
          $ref: '#/components/schemas/FleetCardType'
        billingAddress:
          $ref: '#/components/schemas/Address'
        billingPhone:
          $ref: '#/components/schemas/Phone'
        expiryDate:
          $ref: '#/components/schemas/ExpiryDate'
        securityCode:
          type: string
        sequenceNumber:
          type: string
          description: Sequence number of the card.
        token:
          $ref: '#/components/schemas/ReferenceToken'
      description: Information on a Fleet account
    FleetData:
      type: object
      properties:
        odometer:
          maxLength: 8
          type: string
          description: Identifies the vehicle’s odometer reading keyed in by the customer
            or clerk.
        vehicleNumber:
          maxLength: 10
          type: string
          description: Identifies the Vehicle Number.
        jobNumber:
          maxLength: 10
          type: string
          description: Identifies the Job Number.
        driverIdNumber:
          maxLength: 10
          type: string
          description: Identifies the unencrypted Driver Number or Identification
            Number.
        fleetEmployeeNumber:
          maxLength: 10
          type: string
          description: Identifies the Fleet Employee Number.
        licenseNumber:
          maxLength: 10
          type: string
          description: Identifies the License
        jobId:
          maxLength: 12
          type: string
          description: Identifies the Job ID.
        departmentNumber:
          maxLength: 12
          type: string
          description: Identifies the Department
        customerData:
          maxLength: 12
          type: string
          description: Identifies the Customer Data.
        userId:
          maxLength: 12
          type: string
          description: Identifies the User ID.
        vehicleId:
          maxLength: 8
          type: string
          description: Identifies the Vehicle ID#.
        fleetTag:
          type: array
          items:
            $ref: '#/components/schemas/FleetTagType'
      description: The Fleet Data Segment for all fleet card transaction requests.
    FuelPurchaseInfo:
      required:
      - pumpNumber
      type: object
      properties:
        pumpNumber:
          type: number
          description: Pump number from which fueling is requested.
        serviceLevelCode:
          $ref: '#/components/schemas/ServiceLevelCode'
        items:
          type: array
          items:
            $ref: '#/components/schemas/POSItem'
      description: Fuel purchase information.
      example:
        pumpNumber: "17"
        serviceLevelCode: S
        items:
        - POSCode: "432"
          itemDescription: Unleaded
          itemPrice: "2.03"
          unitOfMeasurement: gallonUS
    FundingSource:
      type: object
      properties:
        saveToVault:
          type: boolean
          description: Flag to indicate if the provided payment method should be vaulted
            to a secure repository for future use for the given customer.
          example: false
          default: false
        type:
          $ref: '#/components/schemas/FundingSourceType'
        vaultedAccount:
          $ref: '#/components/schemas/VaultedAccount'
        credit:
          $ref: '#/components/schemas/Credit'
        prepaid:
          $ref: '#/components/schemas/Prepaid'
        fleet:
          $ref: '#/components/schemas/Fleet'
        applePay:
          $ref: '#/components/schemas/ApplePay'
        androidPay:
          $ref: '#/components/schemas/AndroidPay'
        samsungPay:
          $ref: '#/components/schemas/SamsungPay'
        paypal:
          $ref: '#/components/schemas/Paypal'
        token:
          $ref: '#/components/schemas/ReferenceToken'
        visaCheckout:
          $ref: '#/components/schemas/VisaCheckout'
        googlePay:
          $ref: '#/components/schemas/GooglePay'
        masterpass:
          $ref: '#/components/schemas/MasterPass'
        ach:
          $ref: '#/components/schemas/ACH'
        venmo:
          $ref: '#/components/schemas/Venmo'
        vipps:
          $ref: '#/components/schemas/Vipps'
        amazonPay:
          $ref: '#/components/schemas/AmazonPay'
        ideal:
          $ref: '#/components/schemas/Ideal'
        bancontact:
          $ref: '#/components/schemas/Bancontact'
        walmartPay:
          $ref: '#/components/schemas/WalmartPay'
        ebt:
          $ref: '#/components/schemas/EBT'
      description: Holds information about funding source for the payment transaction.
        Can hold only one above the provided funding sources.
    GooglePay:
      type: object
      properties:
        version:
          type: string
          description: Identifies encryption/signing scheme.
          example: EC_v1
        developerEmail:
          type: string
        signature:
          type: string
          description: Signature to verify Google initiated message.
          example: MIAGCSqGSIb......AAAA==
        data:
          type: string
          description: Data includes encryptedMessage, ephemeralPublicKey, tag.
          example: '{"encryptedMessage":"8nx...u003d","ephemeralPublicKey":"BGH...u003d","tag":"nvm...\u003d"}'
        dPanLast4:
          type: string
          example: "9876"
        bin:
          type: string
        eciIndicator:
          type: string
        expiryDate:
          $ref: '#/components/schemas/ExpiryDate'
        panType:
          type: string
        cardType:
          $ref: '#/components/schemas/CreditCardType'
        token:
          $ref: '#/components/schemas/ReferenceToken'
        billingAddress:
          $ref: '#/components/schemas/Address'
        billingPhone:
          $ref: '#/components/schemas/Phone'
      description: Google Payment specific information
    Ideal:
      type: object
      properties:
        returnUrl:
          type: string
        deepLink:
          type: string
    ISO-4217:
      type: object
      properties:
        code:
          type: string
          example: USD
          default: USD
        number:
          type: integer
          example: 840
        digits:
          type: integer
          example: 2
        currency:
          type: string
          example: US Dollar
          default: US Dollar
      description: Holds currency information
    MasterPass:
      type: object
      properties:
        transactionId:
          type: string
          description: Identifier corresponding to an account enrolled with MasterPass
            system.
          example: "1234732704291071701"
        credit:
          $ref: '#/components/schemas/Credit'
      description: MasterPass information
    MultiSale:
      type: object
      properties:
        parentTransactionId:
          type: string
          description: Unique identifier of multi transaction.
          readOnly: true
          example: 485-27834-285903824-095
        merchantTransactionId:
          type: string
          description: Merchant transaction id
        createdTime:
          type: string
          description: Multi sale creation date time value.
          format: date-time
          readOnly: true
          example: 2017-03-21T08:15:30-05:00
        parentExternalId:
          type: string
          description: External transaction id reference
        purchaseInfo:
          $ref: '#/components/schemas/PurchaseInfo'
        sales:
          type: array
          items:
            $ref: '#/components/schemas/Sale'
      description: Multiple sale transaction details.
    MultiRefund:
      type: object
      properties:
        parentTransactionId:
          type: string
          description: Unique identifier of multi transaction.
          readOnly: true
          example: 485-27834-285903824-095
        merchantTransactionId:
          type: string
          description: Merchant transaction id
        createdTime:
          type: string
          description: Multi refund creation date time value.
          format: date-time
          readOnly: true
          example: 2017-03-21T08:15:30-05:00
        parentExternalId:
          type: string
          description: External transaction id reference
        purchaseInfo:
          $ref: '#/components/schemas/PurchaseInfo'
        refunds:
          type: array
          items:
            $ref: '#/components/schemas/Refund'
      description: Multiple refund transaction details.
    MultiVoid:
      type: object
      properties:
        parentTransactionId:
          type: string
          description: Unique identifier of multi transaction.
          readOnly: true
          example: 485-27834-285903824-095
        merchantTransactionId:
          type: string
          description: Merchant transaction id
        createdTime:
          type: string
          description: Multi void creation date time value.
          format: date-time
          readOnly: true
          example: 2017-03-21T08:15:30-05:00
        parentExternalId:
          type: string
          description: External transaction id reference
        purchaseInfo:
          $ref: '#/components/schemas/PurchaseInfo'
        voids:
          type: array
          items:
            $ref: '#/components/schemas/Void'
      description: Multiple void transaction details.
    MultiRefundVoid:
      type: object
      properties:
        parentTransactionId:
          type: string
          description: Unique identifier of multi transaction.
          readOnly: true
          example: 485-27834-285903824-095
        merchantTransactionId:
          type: string
          description: Merchant transaction id
        createdTime:
          type: string
          description: Multi void creation date time value.
          format: date-time
          readOnly: true
          example: 2017-03-21T08:15:30-05:00
        parentExternalId:
          type: string
          description: External transaction id reference
        purchaseInfo:
          $ref: '#/components/schemas/PurchaseInfo'
        refunds:
          type: array
          items:
            $ref: '#/components/schemas/Refund'
      description: Multiple void transaction details.
    NVP:
      title: Name and Value pair.
      type: object
      properties:
        name:
          type: string
        value:
          type: string
        valueAsList:
          minItems: 0
          type: array
          items:
            type: string
    Order:
      required:
      - orderId
      type: object
      properties:
        orderId:
          type: string
          description: Client provided unique identifier for the order related to
            the requested authorization
          example: Order001
        altOrderId:
          type: string
          description: Alternate order id
        orderType:
          type: string
          description: Type of the order
        shipmentIndicator:
          type: string
          description: Indicates order with Single or Multiple shipments
        emails:
          type: array
          items:
            $ref: '#/components/schemas/Email'
        addresses:
          type: array
          items:
            $ref: '#/components/schemas/Address'
        phoneNumbers:
          type: array
          items:
            $ref: '#/components/schemas/Phone'
        deliveryService:
          $ref: '#/components/schemas/DeliveryService'
      description: Information about the order details
    OfferStatus:
      type: object
      properties:
        code:
          type: string
          description: Indicates offer status code, NOT_ACTIVATED | ACTIVATED | REDEEMED
            | DECLINED | CANCELLED | FAILED
        statusInfo:
          minItems: 0
          uniqueItems: true
          type: array
          description: Details about what to display, images, messaging, etc.
          items:
            $ref: '#/components/schemas/NVP'
      description: Maintain the status of stackable promotions
    Paypal:
      type: object
      properties:
        payerId:
          type: string
          description: Paypal generated Unique identfier for a Paypal account.
          example: LPLWNMTBWMFAY
        nonce:
          type: string
          description: Paypal generated nonce.
          example: ab12-124C-ab12-124C-ab12-124C
        token:
          $ref: '#/components/schemas/ReferenceToken'
        credit:
          $ref: '#/components/schemas/Credit'
      description: Information about a Paypal account.
    Phone:
      type: object
      properties:
        value:
          type: string
          description: The value SHOULD be specified according to the format defined
            in RFC3966, e.g., 'tel:+1-201-555-0123'.
        type:
          type: string
          description: Often has typical values of "work","billing", "home", "mobile",
            "fax", "pager", and "other" and MAY allow more types to be defined by
            the service client.
        extension:
          type: string
          description: Defines the extension of the phone number.
        primary:
          type: boolean
          description: Defines if this entry is to be used as the primary or default
            for the user.
          default: false
      description: Phone number for the user.
      example:
        value: 555-555-5555
        type: billing
        extension: "2145"
    POSItem:
      type: object
      properties:
        itemDescription:
          type: string
          example: Standard Wash (or) Unleaded Petrol
        itemPrice:
          type: number
          format: double
          example: 7.5
        unitOfMeasurement:
          type: string
          example: each
        unitsSold:
          type: number
          format: double
          example: 1.0
        totalItemSaleAmount:
          type: number
          format: double
          example: 7.5
        originalItemPrice:
          type: number
          format: double
          example: 7.5
        originalTotalSaleAmount:
          type: number
          format: double
          example: 7.5
        posCodeFormat:
          type: string
          example: plu
        posCode:
          type: string
          example: "102"
        posCodeModifier:
          type: string
          example: "1"
        productCode:
          type: string
          example: "102"
        tax:
          type: array
          items:
            $ref: '#/components/schemas/TaxDetails'
        type:
          $ref: '#/components/schemas/POSItemType'
        serviceLevelCode:
          $ref: '#/components/schemas/ServiceLevelCode'
        priceAdjustments:
          type: array
          items:
            $ref: '#/components/schemas/PriceAdjustment'
        washCodes:
          type: array
          items:
            $ref: '#/components/schemas/WashCode'
        priceTier:
          type: string
      description: Structure to support passing POS sale info as part of the sale
        request.
    POSItemType:
      type: string
      description: Indicates the type of item
      enum:
      - CARWASH
      - FUEL
    Prepaid:
      type: object
      properties:
        cardNumber:
          type: string
          description: Prepaid card number.
          example: "6759649826438453"
        cardSubType:
          type: string
          description: Merchant or brand specific information about the type of account.Issuer/group
            information.
          example: Merchant Brand
        securityCode:
          type: string
          description: Security code of prepaid card
          example: "345"
        promotionCode:
          type: string
          description: Promotion code for prepaid account activation.
        alias:
          type: string
          readOnly: true
          example: "8453"
        expiryDate:
          $ref: '#/components/schemas/ExpiryDate'
        balance:
          $ref: '#/components/schemas/PrepaidBalance'
        token:
          $ref: '#/components/schemas/ReferenceToken'
      description: Prepaid (a.k.a. gift) account information
    PrepaidBalance:
      required:
      - currencyCode
      - currentBalance
      type: object
      properties:
        currentBalance:
          type: number
          description: The current balance of prepaid card in lower denomination of
            the currency.
        beginBalance:
          type: number
          description: The balance of prepaid card before a transaction in lower denomination
            of the currency.
        currencyCode:
          $ref: '#/components/schemas/ISO-4217'
        currencyType:
          $ref: '#/components/schemas/CurrencyPairType'
      description: Details of balance in the prepaid card.
      example:
        currentBalance: 1100
        beginBalance: 1000
        currencyCode: 840
        currencyType: BASE
    PriceAdjustment:
      type: object
      properties:
        adjustmentId:
          type: string
          example: discount prepay
        productCode:
          type: string
          example: "941"
        programID:
          type: string
          example: P66
        reason:
          type: string
          example: loyaltyOffer
        amount:
          type: number
          format: double
          example: 0.1
        percentage:
          type: number
          format: float
          example: 10.0
        itemPrice:
          type: number
          format: double
          example: 7.5
        unitOfMeasurement:
          type: string
          example: each
        unitsSold:
          type: number
          format: double
          example: 1.0
        rebateLabel:
          type: string
          example: HostDiscount
        maxQuantity:
          type: number
          format: double
          example: 7.5
        offerStatus:
          $ref: '#/components/schemas/OfferStatus'
      description: Structure to support providing price adjustment for sale item.
    PurchaseInfo:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the resource at the site. If a site has
            multiple car wash systems, this would be used to identify each separately.
          example: car_wash_1
        name:
          type: string
          description: Common name for the resource as specified at the site.
          example: Automatic Car Wash
        order:
          $ref: '#/components/schemas/Order'
        items:
          type: array
          description: Item(s) for sale at the resource.  Common examples are the
            car wash packages for sale.
          items:
            $ref: '#/components/schemas/POSItem'
      description: Information about Resources associated with the Transaction.  The
        common example is the car wash system.
    Refund:
      type: object
      properties:
        fdRefundId:
          type: string
          description: Unique identifier provided for a refund.
          readOnly: true
          example: 9a34144657d0aa6e0157d3808ed000f2
        fdTransactionId:
          type: string
          description: Unique identifier for sale/capture.
          example: 9a34144657d0aa6e0157d3808ed000f2
        externalId:
          type: string
          description: External transaction id reference
        merchantId:
          type: string
          description: Merchant identifier where the transaction is being performed.
          example: M117008616001
        altMerchantId:
          type: string
          description: Alternate Merchant identifier where the transaction is being
            performed.
          example: "23232"
        storeId:
          type: string
          description: Store identifier where the transaction is being performed.
          example: "123456"
        merchantTokenCode:
          type: string
          description: Merchant token code used for token generation
        merchantTerminalId:
          type: string
          description: Merchant terminal identifier
        merchantTransactionId:
          type: string
          description: Merchant transaction id
        status:
          $ref: '#/components/schemas/PaymentStatus'
        requestedAmount:
          $ref: '#/components/schemas/RequestedAmount'
        approvedAmount:
          $ref: '#/components/schemas/ApprovedAmount'
        currencyCode:
          $ref: '#/components/schemas/ISO-4217'
        amountSplitInfo:
          $ref: '#/components/schemas/AmountSplitInfo'
        fundingSource:
          $ref: '#/components/schemas/FundingSource'
        dynamicDescriptors:
          $ref: '#/components/schemas/DynamicDescriptors'
        purchaseInfo:
          minItems: 0
          type: array
          items:
            $ref: '#/components/schemas/PurchaseInfo'
        postDate:
          type: string
          description: Settlement date for the transaction. Format- MMDDYYYY
          format: date
        transactionDateTime:
          type: string
          description: Date and time of the transaction.
          format: date-time
          readOnly: true
          example: 2016-04-16T16:06:05Z
        createdDateTime:
          type: string
          description: Date and time of resource creation.
          format: date-time
          readOnly: true
          example: 2016-04-16T16:06:05Z
        lastUpdatedDateTime:
          type: string
          description: Last updated Date and time of resource.
          format: date-time
          readOnly: true
          example: 2016-04-16T16:06:05Z
        hostExtraInfo:
          minItems: 0
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/NVP'
      description: Information related to a refund. Requested amount to refund in
        lower denomination. When not provided either the authorized amount in fdAuthorizationId
        or captured amount in fdCaptureId will be used.
    RequestedAmount:
      title: Requested Amount
      minimum: 0
      exclusiveMinimum: true
      type: number
      description: Requested amount for the given request type [auth, capture, refund,
        etc] in lower denomination.
      format: double
      example: 500.00
    ReferenceToken:
      type: object
      properties:
        tokenId:
          type: string
          description: Actual token value
          example: 292bb6b886fc4446894f878b7e32bd5e
        tokenProvider:
          type: string
          description: Indicates what system is the originator of the token
          example: TRANS_ARMOR
        expiryDate:
          $ref: '#/components/schemas/ExpiryDate'
        tokenType:
          $ref: '#/components/schemas/ReferenceTokenType'
      description: Surrogate value used to represent a handle to an account without
        sharing PCI/PII data to look it up.
    TaxDetails:
      type: object
      properties:
        code:
          type: string
          example: TX01
        description:
          type: string
          example: Sales Tax
        amount:
          type: string
          example: "7.50"
        rate:
          type: string
          example: "13.5"
      description: Tax details.
    ThreeDSecure:
      type: object
      properties:
        transactionId:
          type: string
          description: Transaction id generated on the server
          example: 292bb6b886fc4446894f878b7e32bd5e
        transactionStatus:
          type: string
          description: Transactions status of 3DS server
          example: C
        transactionStatusReason:
          type: string
          description: Reason for the transaction status
        challengeResponse:
          type: string
          example: ewogIC
        challengeIndicator:
          type: string
          example: '01 = No preference 02 = No challenge requested 03 = Challenge
            requested: 3DS Requestor Preference 04 = Challenge requested: Mandate'
        dsTransactionId:
          type: string
          example: 292bb6b886fc4446894f878b7e32bd5e
        acsTransactionId:
          type: string
          example: 292bb6b886fc4446894f878b7e32bd5e
        serverTransactionId:
          type: string
          example: 292bb6b886fc4446894f878b7e32bd5e
        acsReferenceNumber:
          type: string
          example: 292bb6b886fc4446894f878b7e32bd5e
        acsSignedContent:
          type: string
          example: 292bb6b88....6fc4446894f878b7e32bd5e
        cardType:
          $ref: '#/components/schemas/CreditCardType'
        challengeRequest:
          type: string
          example: ewogICAiYW.......MjJjMGVjIgp9
        acsUrl:
          type: string
          example: https://test.modirum.com/dstests/ACSEmu2
        iframeContent:
          type: string
          example: <iframe></iframe>
        termUrl:
          type: string
          example: https://mydomain/3dstest?transactionId=292bb6b886fc4446894f878b7e32bd5e
        isThreeDSMethodCompleted:
          type: boolean
          example: true
        isAuthenticationCompleted:
          type: boolean
          example: true
        cavv:
          type: string
          description: Card authenticaion verificaiton value
        threeDSVersion:
          type: string
        expiryDateTime:
          type: string
          description: 3DS challenge transaction expiry date time.
          format: date-time
          readOnly: true
          example: 2020-01-01T16:06:05Z
        eci:
          type: string
          description: Electronic Commerce Indicator value
      description: Details of ThreeDSecure transaction used to process the challege
        flow
    Sale:
      required:
      - requestedAmount
      type: object
      properties:
        fdSaleId:
          type: string
          description: Unique Identifier provided by payment platform for a payment
            sale transaction.
          readOnly: true
          example: 8a34144657d0aa6e0157d3808ed000f2
        externalId:
          type: string
          description: External transaction id reference
        status:
          $ref: '#/components/schemas/PaymentStatus'
        transactionSubtype:
          type: string
          description: Indicates subtype of a given transaction for EBT, ie EBTCASH
            or EBTSNAP
        merchantId:
          type: string
          description: Merchant identifier where the transaction is being performed.
          example: M117008616001
        altMerchantId:
          type: string
          description: Alternate Merchant identifier where the transaction is being
            performed.
          example: "23232"
        storeId:
          type: string
          description: Store identifier where the transaction is being performed.
          example: "123456"
        merchantTokenCode:
          type: string
          description: Merchant token code used for token generation
        merchantTerminalId:
          type: string
          description: Merchant terminal identifier
        merchantTransactionId:
          type: string
          description: Merchant transaction id
        exemptionCode:
          type: string
          description: Exemption code for 3DS transaction
        transactionOrigin:
          $ref: '#/components/schemas/TransactionOrigin'
        requestedAmount:
          $ref: '#/components/schemas/RequestedAmount'
        approvedAmount:
          $ref: '#/components/schemas/ApprovedAmount'
        currencyCode:
          $ref: '#/components/schemas/ISO-4217'
        dynamicDescriptors:
          $ref: '#/components/schemas/DynamicDescriptors'
        postDate:
          type: string
          description: Settlement date for the transaction. Format- MMDDYYYY
          format: date
        partialPaymentAllowed:
          type: boolean
          description: Flag that indicates if partial transaction is allowed or not
        fundingSource:
          $ref: '#/components/schemas/FundingSource'
        amountSplitInfo:
          $ref: '#/components/schemas/AmountSplitInfo'
        purchaseInfo:
          minItems: 0
          type: array
          items:
            $ref: '#/components/schemas/PurchaseInfo'
        industrySpecificInfo:
          type: object
          properties:
            fuelPurchaseInfo:
              $ref: '#/components/schemas/FuelPurchaseInfo'
          description: Industry specific details like petro for example.
        qrCodeId:
          type: string
          description: Unique Identifier provided by payment platform for a given
            funding source.
          readOnly: true
        stacId:
          type: string
          description: Unique Identifier provided by payment platform for a given
            funding source.
        transactionDateTime:
          type: string
          description: Date and time of the transaction.
          format: date-time
          readOnly: true
          example: 2016-04-16T16:06:05Z
        createdDateTime:
          type: string
          description: Date and time of resource creation.
          format: date-time
          readOnly: true
          example: 2016-04-16T16:06:05Z
        lastUpdatedDateTime:
          type: string
          description: Last updated Date and time of resource.
          format: date-time
          readOnly: true
          example: 2016-04-16T16:06:05Z
        hostExtraInfo:
          minItems: 0
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/NVP'
        threeDSecureInfo:
          $ref: '#/components/schemas/ThreeDSecure'
        fleetData:
          $ref: '#/components/schemas/FleetData'
        errorInfo:
          $ref: '#/components/schemas/Error'
      description: Information related to a SALE transaction - can only be ONE of
        the funding source among account, credit, prepaid, ApplePay.
    SamsungPay:
      type: object
      properties:
        version:
          type: string
          example: EC_v1
        developerEmail:
          type: string
        data:
          type: string
          example: 3CguW5ecfTzO...03d
        signature:
          type: string
          example: MIAGCSqGSIb......AAAA==
        decryptAlias:
          type: string
          description: field of the public key certificate.
          example: oslo.com.xxx.Prod_mer
        dPanLast4:
          type: string
          example: "9876"
        bin:
          type: string
        eciIndicator:
          type: string
        expiryDate:
          $ref: '#/components/schemas/ExpiryDate'
        panType:
          type: string
        cardType:
          $ref: '#/components/schemas/CreditCardType'
        header:
          type: object
          properties:
            ephemeralPublicKey:
              type: string
              example: MFkwEw...03d
            publicKeyHash:
              type: string
              example: +vbONw...IM=
        token:
          $ref: '#/components/schemas/ReferenceToken'
        billingAddress:
          $ref: '#/components/schemas/Address'
        billingPhone:
          $ref: '#/components/schemas/Phone'
    VaultedAccount:
      type: object
      properties:
        fdAccountId:
          type: string
          description: Unique identifier for a customer account vaulted with uCom
        securityCode:
          type: string
          description: Card Verificatiion value.
        status:
          $ref: '#/components/schemas/AccountStatus'
        type:
          $ref: '#/components/schemas/AccountType'
      description: FD Account information
      example:
        fdAccountId: muid-3d4f2ac...c91014f2dc1
    Venmo:
      type: object
      properties:
        nonce:
          type: string
          description: Venmo generated nonce.
          example: ab12-124C-ab12-124C-ab12-124C
        token:
          $ref: '#/components/schemas/ReferenceToken'
      description: Information about a Venmo account.
    Vipps:
      required:
      - paymentId
      type: object
      properties:
        paymentId:
          type: string
          description: The payment_id of Vipps. Used to correlate with the webhook
            of an open order.
          example: ab12-124C-ab12-124C-ab12-124C
        credit:
          $ref: '#/components/schemas/Credit'
      description: Information about a Vipps account. 'credit' is a read-only property.
    VisaCheckout:
      type: object
      properties:
        callId:
          type: string
          description: Identifier corresponding to an account enrolled with Visa Checkout
            system.
          example: "1234732704291071701"
        credit:
          $ref: '#/components/schemas/Credit'
      description: Visa Checkout information
    Void:
      type: object
      properties:
        fdTransactionId:
          type: string
          description: Unique identifier provided for sale/capture/refund.
          example: 9a34144657d0aa6e0157d3808ed000f2
        externalId:
          type: string
          description: External transaction id reference
        merchantTransactionId:
          type: string
          description: Merchant transaction id
        approvedAmount:
          $ref: '#/components/schemas/ApprovedAmount'
        transactionDateTime:
          type: string
          description: Date and time of the transaction.
          format: date-time
          readOnly: true
          example: 2016-04-16T16:06:05Z
        storeId:
          type: string
          description: Store identifier where the transaction is being performed.
          example: "123456"
        currencyCode:
          $ref: '#/components/schemas/ISO-4217'
        hostExtraInfo:
          minItems: 0
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/NVP'
        dynamicDescriptors:
          $ref: '#/components/schemas/DynamicDescriptors'
        fundingSource:
          $ref: '#/components/schemas/FundingSource'
        purchaseInfo:
          minItems: 0
          type: array
          items:
            $ref: '#/components/schemas/PurchaseInfo'
      description: Information related to a void.
    WashCode:
      type: object
      properties:
        code:
          type: string
          description: Wash code generated by the POS system.
        description:
          type: string
          description: Wash code description generated by the POS system.
        expiration:
          type: string
          description: Expiration date for the purchased wash code
          format: date-time
        message:
          type: string
          description: Field to carry message from site system for display to customer.
      description: Purchased wash information.
    WalmartPay:
      type: object
      properties:
        credit:
          $ref: '#/components/schemas/Credit'
        token:
          $ref: '#/components/schemas/ReferenceToken'
    DeviceInfo:
      required:
      - id
      - kind
      type: object
      properties:
        id:
          type: string
          description: Unique Id for the device. Value should not contain line feeds,
            carriage returns, tabs, leading or trailing spaces, or multiple spaces.
          example: 537edec8-d33e-4ee8-93a7-b9f61876950c
        kind:
          type: string
          description: Possible values are mobile, wearable, automobile, embedded,desktop,
            other.
          example: mobile
        details:
          title: deviceData
          minItems: 0
          uniqueItems: true
          type: array
          description: Device data information from multiple providers.
          items:
            type: object
            properties:
              provider:
                type: string
                description: Identifies the provider of the data and is often used
                  when decrypting data on the server.
                example: InAuth
              dataCapture:
                type: object
                properties:
                  rawData:
                    type: string
                    description: Device capture - raw data blob
                    example: aaaaaXREUVZGRlFY...aMV
                  dataEventId:
                    type: string
                    description: Event identifier used map state on the server.
                    example: BB8E4E92...Fz1E063113
                  captureTime:
                    type: string
                    description: Device data capture time in Internet Date/Time format
                      - yyyy-MM-dd'T'HH:mm:ss'Z'
                    format: date-time
                    example: 2016-04-16T16:06:05Z
                description: Device data captured as a bundle and transmitted as an
                  encrypted and/or specifically formated string.
              dataStatic:
                type: object
                properties:
                  os:
                    type: string
                    description: Device OS name
                    example: Android 5.1.1 Lollipop
                  osVersion:
                    type: string
                    description: Device OS version
                    example: 5.1.1 Lollipop
                  model:
                    type: string
                    description: Device model
                    example: XT1540
                  type:
                    type: string
                    description: Device type
                    example: Moto G
                description: Device static details
              dataDynamic:
                type: object
                properties:
                  latitude:
                    type: string
                    description: Device position - latitude at the time of the data
                      event
                    example: 13.0827 N
                  longitude:
                    type: string
                    description: Device position - longitude at the time of the data
                      event
                    example: 80.2707 E
                  ipAddress:
                    type: string
                    description: IP address
                    example: 172.27.37.221
                  captureTime:
                    type: string
                    description: Device data capture time in Internet Date/Time format
                      - yyyy-MM-dd'T'HH:mm:ss'Z'
                    format: date-time
                    example: 2016-04-16T16:06:05Z
                description: Device location details
              dataApplication:
                type: object
                properties:
                  version:
                    type: string
                    description: Mobile application version.
                    format: sting
                    example: 1.0.0
                  name:
                    type: string
                    description: Mobile application name.
                    format: sting
                    example: aplication-name
                  country:
                    type: string
                    description: Mobile application store country.
                    format: sting
                    example: US
                description: Mobile application specific data
            description: Collection of device data
        additionalInfo:
          minItems: 0
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/NVP'
      description: Request origin device details
    Error:
      type: object
      properties:
        code:
          type: string
          description: Uniquely identifies an error condition. Client applications
            need to read and handle errors based on this.
        message:
          type: string
          description: A generic description of the error condition.
        category:
          type: string
          description: The resource associated with the error condition.
        developerInfo:
          type: object
          properties:
            developerMessage:
              type: string
              description: An elaborative description of the error description.
            moreInfo:
              type: string
              description: Link to the error in Developer page.
            fieldError:
              type: array
              description: Detailed information about message format errors.
              items:
                type: object
                properties:
                  field:
                    type: string
                    description: The property or attribute associated with the error
                  message:
                    type: string
                    description: Information specific to a property or attribute.
          description: Information that needs to be understood by the client developers
            and should not be interpreted for application processing.
        hostExtraInfo:
          minItems: 0
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/NVP'
        threeDSecureInfo:
          $ref: '#/components/schemas/ThreeDSecure'
        _links:
          type: array
          items:
            $ref: '#/components/schemas/Link'
      description: Model for error messaging
    Link:
      required:
      - href
      - rel
      type: object
      properties:
        href:
          type: string
          description: URL to linked resource.
          format: uri
          example: https://api.example.com/v1/customers/cust-id-123456/accounts/acct-id-123456
        rel:
          type: string
          description: Defines the type of link relationship to current resource.
          example: linked.account
        method:
          type: string
          description: Defines the HTTP method for the given href.
          example: GET
          default: GET
        id:
          type: string
          description: Identifier to the resource.
          example: 415e5cf6bfdb11e8a355529269fb1459
      description: Model to communicate linked resources.
    AccountStatus:
      type: string
      description: Indicates the status of an account.
      enum:
      - ACTIVE
      - INACTIVE
      - TERMINATED
      - ISSUER_TERMINATED
      - WALLET_TERMINATED
      - PENDING
    AccountType:
      type: string
      description: Type of Account vaulted
      enum:
      - CREDIT
      - PREPAID
      - ACH
      - LOYALTY
      - PAYPAL
      - MASTERPASS
      - VENMO
      - THREEDSECURE
      - VAULTED_ACCOUNT
      - FLEET
    AchEnrollmentStatus:
      type: string
      description: Indicates ACH enrollment status
      enum:
      - ACTIVE
      - PENDING
      - PENDING_LINKED_ACCOUNT
    AchEnrollmentSubStatus:
      type: string
      description: Indicates ACH enrollment pending status
      enum:
      - PENDING_BANK_VALIDATION
      - PENDING_PIN_VALIDATION
      - PENDING_EMAIL_VALIDATION
      - PENDING_PHONE_VALIDATION
      - PENDING_SOFT_BLOCK
      - PENDING_HARD_BLOCK
    CreditCardType:
      title: Credit Card Type
      type: string
      description: Indicates the type of credit account association
      enum:
      - AMEX
      - DISCOVER
      - MASTERCARD
      - PLCC
      - VISA
      - OTHER
    AchCardType:
      type: string
      description: Indicates the type of ACH card association
      enum:
      - CONNECTPAY
    AchAccountType:
      type: string
      description: ACH account type
      enum:
      - CHECKING
      - SAVINGS
    CurrencyPairType:
      type: string
      description: Describes the type of currency where BASE represents the currency
        from Host and TRANSACTION represents the one requested.
      enum:
      - BASE
      - TRANSACTION
    FleetCardType:
      type: string
      description: Indicates the type of fleet account association
      enum:
      - WEX
    FleetTagType:
      title: Indicates the possible values accepted in Fleet Data segment to Payment
        Processor.
      type: object
      properties:
        name:
          type: string
          example: VHT
        value:
          type: string
          example: TXT 1200
    FundingSourceType:
      type: string
      description: Describes the type of Funding source
      enum:
      - VAULTED_ACCOUNT
      - CREDIT
      - PREPAID
      - APPLE_PAY
      - ANDRIOD_PAY
      - PAYPAL
      - TOKEN
      - NONCE
      - VCO
      - VENMO
      - AMAZON_PAY
      - VIPPS
      - FLEET
      - BANCONTACT
      - IDEAL
      - WALMART_PAY
      - EBT
      - ACH
    OperationType:
      type: string
      description: Indicates the status of the balance transaction of a given account.
        'SALEVOID' - Void a sale transaction 'REFUNDVOID' - Void a refund transaction
      enum:
      - SALEVOID
      - REFUNDVOID
    PaymentStatus:
      title: Payment Status
      type: string
      description: Indicates the status of an payment operation.
      enum:
      - APPROVED
      - DECLINED
      - CANCELLED
      - CHALLENGED
      - PENDING
      - FAILED
    ReferenceTokenType:
      type: string
      description: Indicates if the given loyalty program is still active or not.
      enum:
      - FORMAT_PRESERVING_MULTI_USE
      - FORMAT_PRESERVING_SINGLE_USE
      - CLAIM_CHECK_NONCE
      - RANDOM_MULTI_USE
      - RANDOM_SINGLE_USE
      - CLAIM_CHECK_NONCE_WITH_PINCAPTURE
    ServiceLevelCode:
      type: string
      description: Indicates service level code.
      default: S
      enum:
      - S
      - F
      - N
      - X
    TransactionOrigin:
      type: string
      description: Transaction origin details.
      enum:
      - ECOM
      - MOTO
      - POS
    UpdateActionType:
      type: string
      description: Indicates the action intended as part of patch operation.
      enum:
      - RESUME_TRANSACTION
      - CANCEL_TRANSACTION
  responses:
    AuthorizationCreated:
      description: Resource created
      headers:
        Location:
          description: Location of newly created resource.
          schema:
            type: string
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Authorization'
    AuthorizationOK:
      description: OK
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Authorization'
    AuthorizationPartiallyCreated:
      description: Partially created
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Authorization'
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    CaptureCreated:
      description: Resource created
      headers:
        Location:
          description: Location of newly created resource.
          schema:
            type: string
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Capture'
    CaptureOK:
      description: OK
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Capture'
    ChargeOK:
      description: OK
      content:
        application/json:
          schema:
            minItems: 0
            type: array
            items:
              $ref: '#/components/schemas/Charge'
    Conflict:
      description: Conflict - The requested operation conflicts with the current state
        of the identified resource.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    NoContent:
      description: The request succeeded but there's really nothing to show.
      content: {}
    NotFound:
      description: Not Found - The requested resource doesn't exist.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    RefundCreated:
      description: Resource created
      headers:
        Location:
          description: Location of newly created resource.
          schema:
            type: string
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Refund'
    RefundOK:
      description: OK
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Refund'
    SaleCreated:
      description: Resource created
      headers:
        Location:
          description: Location of newly created resource.
          schema:
            type: string
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Sale'
    SaleOK:
      description: OK
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Sale'
    SalePartiallyCreated:
      description: Partially created
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Sale'
    ServerError:
      description: An unexpected server error occured.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    TooEarly:
      description: Request is too early to process.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Unauthorized:
      description: Unauthorized
      content: {}
  parameters:
    AcceptLanguageParam:
      name: Accept-Language
      in: header
      description: The Accept-Language header contains information about the language
        preference of a user. This HTTP header is useful to multilingual sites for
        deciding the best language to serve to the client. i.e en-US,fr-CA
      schema:
        type: string
    ApiKeyParam:
      name: Api-Key
      in: header
      description: An API key is a string value passed by a client app to the API
        proxies. The key uniquely identifies the client app.
      required: true
      schema:
        type: string
    AuthorizationParam:
      name: Authorization
      in: header
      description: Authorization information for the request. Format- `HMAC {hmacToken}`
      required: true
      schema:
        type: string
    ClientTokenParam:
      name: Client-Token
      in: header
      description: Used to pass the original client OAuth token information given
        in a client-credentials flow.  This field is only used when the server is
        making the request and needs to link the transaction to a specific client.  Format-
        `Bearer {access_token}`
      schema:
        type: string
    ClientRequestIdParam:
      name: Client-Request-Id
      in: header
      description: Contains a unique ID generated by the client that can be used for
        enforcing idempotency on POST actions. POSTs are inherently non-idempotent
        and submitting the exact same request multiple times would create duplicate
        resources. Note:- Omitting this header increases the risk of duplicate transactions,
        which for payments could cost the client issues like double-billing.
      required: true
      schema:
        type: string
    ClientRequestIdQueryParam:
      name: clientRequestId
      in: query
      description: Contains a unique ID generated by the client that can be used for
        enforcing idempotency on POST actions.
      schema:
        type: string
    FdAuthorizationIdParam:
      name: fdAuthorizationId
      in: path
      description: Unique identifier provided for the payment authorization
      required: true
      schema:
        type: string
    FdCaptureIdParam:
      name: fdCaptureId
      in: path
      description: Unique identifier provided for a payment capture.
      required: true
      schema:
        type: string
    FdRefundIdParam:
      name: fdRefundId
      in: path
      description: Unique identifier provided for a refund.
      required: true
      schema:
        type: string
    FdSaleIdParam:
      name: fdSaleId
      in: path
      description: Unique identifier provided for a sale transaction.
      required: true
      schema:
        type: string
    FdParentTransactionIdParam:
      name: fdParentTransactionId
      in: path
      description: Unique identifier provided for a parent transaction.
      required: true
      schema:
        type: string
    SubMerchantIdParam:
      name: Sub-Merchant-Id
      in: header
      description: Sub Merchant Id contains information about the merchant identifier
      schema:
        type: string
    RetailerPartnerIdParam:
      name: Retailer-Partner-Id
      in: header
      description: Retailer partner identification for marketplace
      schema:
        type: string
    TimestampParam:
      name: Timestamp
      in: header
      description: Epoch timestamp in the request initiating system
      required: true
      schema:
        type: string
