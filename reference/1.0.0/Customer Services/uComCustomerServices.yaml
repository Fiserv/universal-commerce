#-------------------------------------
# Document Change Log
# 0.2.3
#     - No Changes
# 0.2.1
#     - Added Merchant id as header field
#     - Added Membership object into User object
# 0.2.0
#     - Added 'OTHER' CreditCardType
#     - Added fields in ThreeDSecure object
# 0.1.9
#    -  Added support for get Api with external Customer Id
# 0.1.8
#     - Added 3ds web support
# 0.1.7
#     - Added 3ds challenge transaction expiry date time in ThreeDSecure
# 0.1.6
#     - Added Accept-Language header field
# 0.1.5
#     - Added date created and modified in the User object.
#     - Added Link in the Error object.
#     - acsSignedContent and CardType in threeDSecureInfo object
# 0.1.4
#     - No Change
# 0.1.3
#     - Adding NVP with valueAsList
#     - update in DeviceInfo.
# 0.1.2
#     - No change.
# 0.1.1
#     - No change.
# 0.1.0
#     - Added client-token in the header field
# 0.0.9
#     - No change.
# 0.0.8
#     - No change.MerchantIdParam
# 0.0.7
#   - Updated ReferenceToken to have more accurate attribute names, removed use value
#   - Cleaned up examples in the models
# 0.0.6
#     - No change.
# 0.0.5
#     - No change.
# 0.0.4
#     - No change.
# 0.0.3
#     - No change.
# 0.0.2
#     - Added 'osVersion' attribute to 'DeviceInfo' object.
# 0.0.1
#     - Initial Version
#-------------------------------------

openapi: 3.0.1
info:
  title: uCom Customer Services
  description: Services related to uCom Customer Profile Management
  version: 0.2.3
servers:
- url: https://int.api.firstdata.com/ucom
tags:
- name: customers
  description: Operations and details about customers which are defined as the end-user of the application.
paths:
  /v1/customers:
    get:
      x-group-name: Customer Services
      x-proxy-name: Get Customer Profile by external id
      tags:
      - customers
      summary: Read a Customer Profile by external id attribute
      description: Fetch the details of a customer providing the external Id.
      parameters:
      - $ref: '#/components/parameters/ApiKeyParam'
      - $ref: '#/components/parameters/TimestampParam'
      - $ref: '#/components/parameters/AuthorizationParam'
      - $ref: '#/components/parameters/ClientTokenParam'
      - $ref: '#/components/parameters/AcceptLanguageParam'
      - $ref: '#/components/parameters/ExternalIdParam'
      - $ref: '#/components/parameters/SubMerchantIdParam'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/responses/OK'
              examples:
                Minimal - 200:
                  summary: Get customer Details Minimal Response
                  $ref: '#/components/examples/GetCustomerDetailsMinimalResponse'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/ServerError'

    post:
      x-group-name: Customer Services
      x-proxy-name: Create Customer Profile
      tags:
      - customers
      summary: Create a Customer Profile, a.k.a. 'register a customer'
      description: Registering a customer in the uCom system results in a unique identifier 'fdCustomerId' that is used in subsequent operations like vaulting a payment account and making mobile payments.
      parameters:
      - $ref: '#/components/parameters/ApiKeyParam'
      - $ref: '#/components/parameters/TimestampParam'
      - $ref: '#/components/parameters/AuthorizationParam'
      - $ref: '#/components/parameters/ClientTokenParam'
      - $ref: '#/components/parameters/ClientRequestIdParam'
      - $ref: '#/components/parameters/AcceptLanguageParam'
      - $ref: '#/components/parameters/SubMerchantIdParam'
      requestBody:
        description: Customer profile information
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerRequest'
            examples:
              Minimal: {summary: Request with minimal parameters, $ref: '#/components/examples/CustomerCreateMinimalRequest'}
        required: true
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/responses/Created'
              examples:
                Minimal - 201:
                  summary: Customer Creation Minimal Response
                  $ref: '#/components/examples/CustomerCreateMinimalResponse'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        409:
          $ref: '#/components/responses/Conflict'
        500:
          $ref: '#/components/responses/ServerError'

  /v1/customers/{fdCustomerId}:
    get:
      x-group-name: Customer Services
      x-proxy-name: Get Customer Profile by fdCustomerId
      tags:
      - customers
      summary: Get Customer Profile by fdCustomerId
      description: Fetch the details of a customer providing the fdCustomerId.
      parameters:
      - $ref: '#/components/parameters/ApiKeyParam'
      - $ref: '#/components/parameters/TimestampParam'
      - $ref: '#/components/parameters/AuthorizationParam'
      - $ref: '#/components/parameters/ClientTokenParam'
      - $ref: '#/components/parameters/FdCustomerIdParam'
      - $ref: '#/components/parameters/AcceptLanguageParam'
      - $ref: '#/components/parameters/SubMerchantIdParam'
      responses:
        200:
          $ref: '#/components/responses/OK'
        200 - Minimal:
          $ref: '#/components/responses/GetCustomerDetailsMinimalResponse'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/ServerError'

    delete:
      x-group-name: Customer Services
      x-proxy-name: Delete Customer Profile
      tags:
      - customers
      summary: Delete a Customer Profile
      description: Delete a customer profile from uCom system by providing the fdCustomerId.
      parameters:
      - $ref: '#/components/parameters/ApiKeyParam'
      - $ref: '#/components/parameters/TimestampParam'
      - $ref: '#/components/parameters/AuthorizationParam'
      - $ref: '#/components/parameters/ClientTokenParam'
      - $ref: '#/components/parameters/FdCustomerIdParam'
      - $ref: '#/components/parameters/AcceptLanguageParam'
      - $ref: '#/components/parameters/SubMerchantIdParam'
      responses:
        204:
          $ref: '#/components/responses/NoContent'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/ServerError'

    patch:
      x-group-name: Customer Services
      x-proxy-name: Update Customer Profile
      tags:
      - customers
      summary: Update a Customer Profile
      description: Update the details in a Customer Profile providing the fdCustomerId.
      parameters:
      - $ref: '#/components/parameters/ApiKeyParam'
      - $ref: '#/components/parameters/TimestampParam'
      - $ref: '#/components/parameters/AuthorizationParam'
      - $ref: '#/components/parameters/ClientTokenParam'
      - $ref: '#/components/parameters/FdCustomerIdParam'
      - $ref: '#/components/parameters/AcceptLanguageParam'
      - $ref: '#/components/parameters/SubMerchantIdParam'
      requestBody:
        description: Customer profile information
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerRequest'
            examples:
              Minimal: {summary: Request with miniam parameters, $ref: '#/components/examples/CustomerUpdateMinimalRequest'}
        required: true
      responses:
        204:
          $ref: '#/components/responses/NoContent'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        409:
          $ref: '#/components/responses/Conflict'
        500:
          $ref: '#/components/responses/ServerError'


components:
  schemas:
    #-------------------------------------
    # Operational Models
    #-------------------------------------
    CustomerRequest:
      title: Customer Request
      type: object
      properties:
        customer:
          $ref: '#/components/schemas/User'
        deviceInfo:
          $ref: '#/components/schemas/DeviceInfo'

    #-------------------------------------
    # Resource Models
    #-------------------------------------
    Address:
      type: object
      properties:
        type:
          type: string
          description: Canonical type values of "work", "home", and "other".
        streetAddress:
          type: string
          description: The full street address component, which may include house number, street name, P.O. box, and multi-line extended street address information.
        locality:
          type: string
          description: The city or locality component.
        region:
          type: string
          description: The state or region component.
        postalCode:
          type: string
          description: The zip code or postal code component.
        country:
          type: string
          description: The country name component.  When specified, the value MUST be in ISO 3166-1 "alpha-2" code format; e.g., the United States and Sweden are "US" and "SE", respectively.
        formatted:
          type: string
          description: The full mailing address, formatted for display or use with a mailing label.
        primary:
          type: boolean
          description: Indicates if this is the default address for the associated resource. It only has meaning when used in a set or array of addresses.
      description: A physical mailing address for this user.
      example:
        type: work
        streetAddress: 100 Universal City Plaza
        locality: Hollywood
        region: CA
        postalCode: "91608"
        country: US
        formatted: |-
          100 Universal City Plaza
          Hollywood, CA 91608 US
        primary: true

    Email:
      type: object
      properties:
        type:
          type: string
          description: The "type" sub-attribute is used to provide a classification meaningful to the (human) user.  The user interface should encourage the use of basic values of "work", "home", and "other" and MAY allow additional type values to be used at the discretion of the service client.
        value:
          type: string
          description: The value SHOULD be specified according to RFC5321.
        primary:
          type: boolean
          description: Defines if this entry is to be used as the primary or default for the user.
          default: false
      description: Email address for the user.
      example:
        value: bjensen@example.com
        type: work
        primary: true
    ExpiryDate:
      type: object
      properties:
        month:
          maxLength: 2
          minLength: 2
          pattern: '[0-9]{2,2}'
          type: string
          description: Month format 'MM'
          example: "09"
        year:
          maxLength: 2
          minLength: 2
          pattern: '[0-9]{2,2}'
          type: string
          description: Year format 'YY'
          example: "20"
        singleValue:
          maxLength: 6
          minLength: 4
          type: string
          description: Month and year together, 'MMYY' or 'MMYYYY'.  If the latter format, the string will be parsed and validated per the given format.  Any other format will be rejected.
      description: Contains account expiration data and needs to either send the values in individual fields OR as a singleValue.

    Membership:
      type: object
      properties:
        membershipType:
          type: string
        membershipId:
          type: string
        membershipProgramId:
          type: string
        membershipStatus:
          type: string
        membershipExpiryDate:
          $ref: '#/components/schemas/ExpiryDate'
        accountNumber:
          type: string
        securityCode:
          type: string
        merchantId:
          type: string
          description: Merchant identifier for which the request has been initiated.
          example: M117008616001
        altMerchantId:
          type: string
          description: Alternate Merchant identifier for which the request has been initiated.
        verifyAccount:
          type: boolean
        additionalInfo:
          minItems: 0
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/NVP'
      description: Membership information for the user.

    Group:
      type: object
      properties:
        value:
          type: string
          description: The id of the group.
        href:
          type: string
          description: The URI of the corresponding "Group" resources to which the user belongs.
        display:
          type: string
          description: The common name of the group.
      description: Group
      example:
        value: e9e30dba-f08f-4109-8486-d5c6a331660a
        href: https://example.com/v2/Groups/e9e30dba-f08f-4109-8486
        display: Tour Guides

    Link:
      required:
      - href
      - rel
      type: object
      properties:
        href:
          type: string
          description: URL to linked resource.
          format: uri
        rel:
          type: string
          description: Defines the type of link relationship to current resource.
          example: self
          enum:
          - current.page
          - previous.page
          - next.page
          - self
        method:
          type: string
          description: Defines the HTTP method for the given href.
          example: GET
          default: GET
        id:
          type: string
          description: Identifier to the resource.
          example: 415e5cf6bfdb11e8a355529269fb1459
      description: Model to communicate linked resources.

    IMS:
      type: object
      properties:
        value:
          type: string
          description: A shortened version one of the following values - aim, gtalk, icq, xmpp, msn, skype, qq, yahoo, or other. This will change with popularity of various applicatiions at any time.
        type:
          type: string
        primary:
          type: boolean
          description: Flag to indicate primary account
          default: false
      description: Instant messaging address for the user.
      example:
        value: someaimhandle
        type: aim

    PersonName:
      type: object
      properties:
        formatted:
          type: string
          description: The full name, including all middle names, titles, and suffixes as appropriate, formatted for display (e.g.,"Ms. Barbara Jane Jensen, III").
        familyName:
          type: string
          description: The family name of the User, or last name in most Western languages (e.g., "Jensen" given the full name "Ms. Barbara Jane Jensen, III").
        givenName:
          type: string
          description: The given name of the User, or first name in most Western languages (e.g., "Barbara" given the full name "Ms. Barbara Jane Jensen, III").
        middleName:
          type: string
          description: The middle name(s) of the User (e.g., "Jane" given the full name "Ms. Barbara Jane Jensen, III").
        honorificPrefix:
          type: string
          description: The honorific prefix(es) of the User, or title in most Western languages (e.g., "Ms." given the full name "Ms. Barbara Jane Jensen, III").
        honorificSuffix:
          type: string
          description: The honorific suffix(es) of the User, or suffix in most Western languages (e.g., "III" given the full name "Ms. Barbara Jane Jensen, III").
      description: The components of the user's name.
      example:
        formatted: Ms. Barbara J Jensen III
        familyName: Jensen
        givenName: Barbara
        middleName: Jane
        honorificPrefix: Ms.
        honorificSuffix: III

    Phone:
      type: object
      properties:
        value:
          type: string
          description: The value SHOULD be specified according to the format defined in RFC3966, e.g., 'tel:+1-201-555-0123'.
        type:
          type: string
          description: Often has typical values of "work", "home", "mobile", "fax", "pager", and "other" and MAY allow more types to be defined by the service client.
        primary:
          type: boolean
          description: Defines if this entry is to be used as the primary or default for the user.
          default: false
      description: Phone number for the user.
      example:
        value: 555-555-5555
        type: work

    Photo:
      type: object
      properties:
        value:
          type: string
          description: URI pointing to user's image file.
        type:
          type: string
          description: Defines the following canonical values to represent popular photo sizes - "photo" and "thumbnail".
      description: A URI that is a uniform resource locator (as defined in Section 1.1.3 of RFC3986) that points to a resource location representing the user's image. The resource MUST be a file (e.g., a GIF, JPEG, or PNG image file) rather than a web page containing an image.
      example:
        value: https://photos.example.com/profilephoto/72930000000Ccne/F
        type: thumbnail

    ThreeDSecure:
      type: object
      properties:
        transactionId:
          type: string
          description: Transaction id generated on the server
          example: 292bb6b886fc4446894f878b7e32bd5e
        transactionStatus:
          type: string
          description: Transactions status of 3DS server
          example: C
        transactionStatusReason:
          type: string
          description: Reason for the transaction status
        challengeResponse:
          type: string
          example: ewogIC
        challengeIndicator:
          type: string
          example: '01 = No preference 02 = No challenge requested 03 = Challenge requested: 3DS Requestor Preference 04 = Challenge requested: Mandate'
        dsTransactionId:
          type: string
          example: 292bb6b886fc4446894f878b7e32bd5e
        acsTransactionId:
          type: string
          example: 292bb6b886fc4446894f878b7e32bd5e
        serverTransactionId:
          type: string
          example: 292bb6b886fc4446894f878b7e32bd5e
        acsReferenceNumber:
          type: string
          example: 292bb6b886fc4446894f878b7e32bd5e
        acsSignedContent:
          type: string
          example: 292bb6b88....6fc4446894f878b7e32bd5e
        cardType:
          $ref: '#/components/schemas/CreditCardType'
        challengeRequest:
          type: string
          example: ewogICAiYW.......MjJjMGVjIgp9
        acsUrl:
          type: string
          example: https://test.modirum.com/dstests/ACSEmu2
        iframeContent:
          type: string
          example: <iframe></iframe>
        termUrl:
          type: string
          example: https://mydomain/3dstest?transactionId=292bb6b886fc4446894f878b7e32bd5e
        isThreeDSMethodCompleted:
          type: boolean
          example: true
        isAuthenticationCompleted:
          type: boolean
          example: true
        cavv:
          type: string
          description: Card authenticaion verificaiton value
        threeDSVersion:
          type: string
        expiryDateTime:
          type: string
          description: 3DS challenge transaction expiry date time.
          format: date-time
          readOnly: true
          example: 2020-01-01T16:06:05Z
        eci:
          type: string
          description: Electronic Commerce Indicator value
      description: Details of ThreeDSecure transaction used to process the challege flow

    User:
      required:
      - externalId
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for a customer profile registered with uCom.
          readOnly: true
          example: fdCustomerId
        externalId:
          type: string
          description: A String that is an identifier for the resource as defined by the provisioning client. While the server does not enforce uniqueness, it is assumed that the value's uniqueness is controlled by the client setting the value.
          example: 123abc456def890ghi098jkl765mno
        userName:
          type: string
          description: A service provider's unique identifier for the user, typically used by the user to directly authenticate to the service provider.
          example: bjensen@example.com
        name:
          $ref: '#/components/schemas/PersonName'
        displayName:
          type: string
          description: The name of the user, suitable for display to end-users.
          example: Babs Jensen
        nickName:
          type: string
          description: The casual way to address the user in real life, e.g., "Bob" or "Bobby" instead of "Robert".
          example: Babs
        profileUrl:
          type: string
          description: A URI that is a uniform resource locator (as defined in Section 1.1.3 of [RFC3986]) and that points to a location representing the user's online profile (e.g., a web page)
          example: https://login.example.com/bjensen
        emails:
          type: array
          items:
            $ref: '#/components/schemas/Email'
        addresses:
          type: array
          items:
            $ref: '#/components/schemas/Address'
        phoneNumbers:
          type: array
          items:
            $ref: '#/components/schemas/Phone'
        ims:
          type: array
          items:
            $ref: '#/components/schemas/IMS'
        photos:
          type: array
          items:
            $ref: '#/components/schemas/Photo'
        userType:
          type: string
          description: Used to identify the relationship between the organization and the user.
          example: Employee
        title:
          type: string
          description: The user's title, such as "Vice President".
          example: Tour Guide
        preferredLanguage:
          type: string
          description: Indicates the user's preferred written or spoken languages and is generally used for selecting a localized user interface.
          example: en-US
        locale:
          type: string
          description: Used to indicate the User's default location for purposes of localizing such items as currency, date time format, or numerical representations.
          example: en-US
        timezone:
          type: string
          description: The User's time zone
          example: America/Los_Angeles
        active:
          type: boolean
          description: A Boolean value indicating the user's administrative status. The definitive meaning of this attribute is determined by the service provider.
          example: true
        password:
          type: string
          description: This attribute is intended to be used as a means to set, replace, or compare (i.e., filter for equality) a password.
          example: some-hashed-value
        groups:
          type: array
          description: A list of groups to which the user belongs, either through direct membership, through nested groups, or dynamically calculated.
          items:
            $ref: '#/components/schemas/Group'
        dateCreated:
          type: string
          description: Date created time in Internet Date/Time format - yyyy-MM-dd'T'HH:mm:ss'Z'
          format: date-time
          example: 2016-04-16T16:06:05Z
        dateModified:
          type: string
          description: Date modified time in Internet Date/Time format - yyyy-MM-dd'T'HH:mm:ss'Z'
          format: date-time
          example: 2016-04-16T16:06:05Z
        membership:
          $ref: '#/components/schemas/Membership'
        hostExtraInfo:
          minItems: 0
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/NVP'
      description: User resource as defined by the System for Cross-domain Identity Management (SCIM).  For more info see http://www.simplecloud.info

    #-------------------------------------
    # Common Models
    #-------------------------------------
    DeviceInfo:
      required:
      - id
      - kind
      type: object
      properties:
        id:
          type: string
          description: Unique Id for the device. Value should not contain line feeds, carriage returns, tabs, leading or trailing spaces, or multiple spaces.
          example: 537edec8-d33e-4ee8-93a7-b9f61876950c
        kind:
          type: string
          description: Possible values are mobile, wearable, automobile, embedded,desktop, other.
          example: mobile
        details:
          title: deviceData
          minItems: 0
          uniqueItems: true
          type: array
          description: Device data information from multiple providers.
          items:
            type: object
            properties:
              provider:
                type: string
                description: Identifies the provider of the data and is often used when decrypting data on the server.
                example: InAuth
              dataCapture:
                type: object
                properties:
                  rawData:
                    type: string
                    description: Device capture - raw data blob
                    example: aaaaaXREUVZGRlFY...aMV
                  dataEventId:
                    type: string
                    description: Event identifier used map state on the server.
                    example: BB8E4E92...Fz1E063113
                  captureTime:
                    type: string
                    description: Device data capture time in Internet Date/Time format - yyyy-MM-dd'T'HH:mm:ss'Z'
                    format: date-time
                    example: 2016-04-16T16:06:05Z
                description: Device data captured as a bundle and transmitted as an encrypted and/or specifically formated string.
              dataStatic:
                type: object
                properties:
                  os:
                    type: string
                    description: Device OS name
                    example: Android 5.1.1 Lollipop
                  osVersion:
                    type: string
                    description: Device OS version
                    example: 5.1.1 Lollipop
                  model:
                    type: string
                    description: Device model
                    example: XT1540
                  type:
                    type: string
                    description: Device type
                    example: Moto G
                description: Device static details
              dataDynamic:
                type: object
                properties:
                  latitude:
                    type: string
                    description: Device position - latitude at the time of the data event
                    example: 13.0827 N
                  longitude:
                    type: string
                    description: Device position - longitude at the time of the data event
                    example: 80.2707 E
                  ipAddress:
                    type: string
                    description: IP address
                    example: 172.27.37.221
                  captureTime:
                    type: string
                    description: Device data capture time in Internet Date/Time format - yyyy-MM-dd'T'HH:mm:ss'Z'
                    format: date-time
                    example: 2016-04-16T16:06:05Z
                description: Device location details
              dataApplication:
                type: object
                properties:
                  version:
                    type: string
                    description: Mobile application version.
                    format: sting
                    example: 1.0.0
                  name:
                    type: string
                    description: Mobile application name.
                    format: sting
                    example: aplication-name
                  country:
                    type: string
                    description: Mobile application store country.
                    format: sting
                    example: US
                description: Mobile application specific data
            description: Collection of device data
        additionalInfo:
          minItems: 0
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/NVP'
      description: Request origin device details
      example:
        id: 537edec8-d33e-4ee8-93a7-b9f61876950c
        kind: mobile
        details:
        - provider: InAuth
          dataCapture:
            rawData: aaaaaXREUVZGRlFY...aMV
            dataEventId: BB8E4E92...Fz1E063113
            captureTime: 2016-04-16T16:06:05Z
          dataStatic:
            os: Android 5.1.1 Lollipop
            osVersion: 5.1.1 Lollipop
            model: XYX-1
            Type: Moto G
          dataDynamic:
            latitude: 13.0827 N
            longitude: 80.2707 E
            ipAddress: 172.27.37.221
            captureTime: 2016-04-16T16:06:05Z
        additionalInfo:
        - name: some-key
          value: some-value

    NVP:
      title: Name and Value pair.
      type: object
      properties:
        name:
          type: string
        value:
          type: string
        valueAsList:
          minItems: 0
          type: array
          items:
            type: string

    Error:
      type: object
      properties:
        code:
          type: string
          description: Uniquely identifies an error condition. Client applications need to read and handle errors based on this.
        message:
          type: string
          description: A generic description of the error condition.
        category:
          type: string
          description: The resource associated with the error condition.
        developerInfo:
          type: object
          properties:
            developerMessage:
              type: string
              description: An elaborative description of the error description.
            moreInfo:
              type: string
              description: Link to the error in Developer page.
            fieldError:
              type: array
              description: Detailed information about message format errors.
              items:
                type: object
                properties:
                  field:
                    type: string
                    description: The property or attribute associated with the error
                  message:
                    type: string
                    description: Information specific to a property or attribute.
          description: Information that needs to be understood by the client developers and should not be interpreted for application processing.
        hostExtraInfo:
          minItems: 0
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/NVP'
        threeDSecureInfo:
          $ref: '#/components/schemas/ThreeDSecure'
        _links:
          type: array
          items:
            $ref: '#/components/schemas/Link'
      description: Model for error messaging
      example:
        code: "40000"
        message: Example Error
        category: example
        developerInfo:
          developerMessage: Invalid Message format in request payload
          moreInfo: https://www.example.com/errors/40000
          fieldError:
          - field: example id
            message: exampleId is mandatory

    #-------------------------------------
    # ENUM Models
    #-------------------------------------
    CreditCardType:
      title: Credit Card Type
      type: string
      description: Indicates the type of credit account association
      enum:
      - AMEX
      - DISCOVER
      - MASTERCARD
      - PLCC
      - VISA
      - OTHER

  #-------------------------------------
  # Responses
  #-------------------------------------
  responses:
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    Conflict:
      description: Conflict - The requested operation conflicts with the current state of the identified resource.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    Created:
      description: Resource created
      headers:
        Location:
          description: Location of newly created resource.
          schema:
            type: string
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/User'

    NoContent:
      description: The request succeeded but there’s really nothing to show.
      content: {}

    NotFound:
      description: Not Found - The requested resource doesn't exist.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    GetCustomerDetailsMinimalResponse:
      description: GetCustomerDetailsMinimalResponse
      content:
        application/json:
          schema:
            $ref: '#/components/examples/GetCustomerDetailsMinimalResponse'
    OK:
      description: OK
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/User'

    ServerError:
      description: An unexpected server error occured.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    Unauthorized:
      description: Unauthorized
      content: {}

  #-------------------------------------
  # Parameter Models
  #-------------------------------------
  parameters:
    AcceptLanguageParam:
      name: Accept-Language
      in: header
      description: The Accept-Language header contains information about the language preference of a user. This HTTP header is useful to multilingual sites for deciding the best language to serve to the client. i.e en-US,fr-CA
      schema:
        type: string

    ApiKeyParam:
      name: Api-Key
      in: header
      description: An API key is a string value passed by a client app to the API proxies. The key uniquely identifies the client app.
      required: true
      schema:
        type: string

    AuthorizationParam:
      name: Authorization
      in: header
      description: Authorization information for the request. Format- `HMAC {hmacToken}`
      required: true
      schema:
        type: string

    ClientTokenParam:
      name: Client-Token
      in: header
      description: Used to pass the original client OAuth token information given in a client-credentials flow.  This field is only used when the server is making the request and needs to link the transaction to a specific client.  Format- `Bearer {access_token}`
      schema:
        type: string

    ClientRequestIdParam:
      name: Client-Request-Id
      in: header
      description: Contains a unique ID generated by the client that can be used for enforcing idempotency on POST actions. POSTs are inherently non-idempotent and submitting the exact same request multiple times would create duplicate resources. Note:- Omitting this header increases the risk of duplicate transactions, which for payments could cost the client issues like double-billing.
      required: true
      schema:
        type: string

    FdCustomerIdParam:
      name: fdCustomerId
      in: path
      description: Unique identifier for a customer profile registered with uCom.
      required: true
      schema:
        type: string

    SubMerchantIdParam:
      name: Sub-Merchant-Id
      in: header
      description: Sub Merchant Id contains information about the merchant identifier
      schema:
        type: string

    TimestampParam:
      name: Timestamp
      in: header
      description: Epoch timestamp in the request initiating syste
      required: true
      schema:
        type: string

    ExternalIdParam:
      name: externalId
      in: query
      description: Used to filter customer based on externalId
      required: true
      schema:
        type: string
  examples:
    CustomerCreateMinimalRequest:
      value:
        customer:
          externalId: customer0001
          name:
            familyName: John
            givenName: Smith
          emails:
          - value: uboddu@example.com
            type: home
            primary: true
          addresses:
          - type: home
            streetAddress: 9 Church Road, Vange
            locality: Basildon
            region: Essex
            postalCode: '3749'
            country: PR
            formatted: |-
              9 Church Road
              Vange, Basildon
              Essex, SS16 4AE, GB
            primary: true
          phoneNumbers:
          - value: +44-123-456-7890
            type: mobile
            primary: true

    CustomerCreateMinimalResponse:
      value:
        id: 0a468dd9add4477f9b01dd9d9b15871a
        externalId: customer0001

    GetCustomerDetailsMinimalResponse:
      value:
        id: 0a468dd9add4477f9b01dd9d9b15871a
        externalId: customer0001
        name:
          familyName: John
          givenName: Smith
        emails:
        - value: uboddu@example.com
          primary: true
        addresses:
        - streetAddress: 9 Church Road, Vange
          locality: Basildon
          postalCode: '3749'
          country: PR
        phoneNumbers:
        - value: +44-123-456-7890
          type: mobile
          primary: true
        dateCreated: '2023-02-16T17:50:26Z'
        dateModified: '2023-02-16T17:50:26Z'

    CustomerUpdateMinimalRequest:
      value:
        customer:
          externalId: BKARGCustomer0001
          name:
            familyName: John
            givenName: Smith
          emails:
          - value: uboddu@example.com
            type: home
            primary: true
          addresses:
          - type: home
            streetAddress: 9 St. Thomas Road, Vange
            locality: Basildon
            region: Essex
            postalCode: '3749'
            country: PR
            formatted: |-
              9 St. Thomas Road
              Vange, Basildon
              Essex, 3749, AR
            primary: true
          phoneNumbers:
          - value: +44-123-456-7890
            type: mobile
            primary: true


